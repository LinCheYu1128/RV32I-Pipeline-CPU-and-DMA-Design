circuit top_SoC :
  module Reg_IF :
    input clock : Clock
    input reset : Reset
    output io : { flip Stall : UInt<1>, flip next_pc_in : UInt<15>, pc : UInt<15>}

    reg pcReg : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[Reg_IF.scala 15:24]
    when io.Stall : @[Reg_IF.scala 17:19]
      pcReg <= pcReg @[Reg_IF.scala 18:15]
    else :
      pcReg <= io.next_pc_in @[Reg_IF.scala 20:15]
    io.pc <= pcReg @[Reg_IF.scala 23:11]

  module Reg_ID :
    input clock : Clock
    input reset : Reset
    output io : { flip Flush : UInt<1>, flip Stall : UInt<1>, flip pc_in : UInt<15>, flip inst_in : UInt<32>, pc : UInt<15>, inst : UInt<32>}

    reg InstReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_ID.scala 19:26]
    reg pcReg : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[Reg_ID.scala 20:25]
    when io.Stall : @[Reg_ID.scala 24:19]
      InstReg <= InstReg @[Reg_ID.scala 25:17]
      pcReg <= pcReg @[Reg_ID.scala 26:15]
    else :
      when io.Flush : @[Reg_ID.scala 27:25]
        InstReg <= UInt<32>("h0") @[Reg_ID.scala 28:17]
        pcReg <= UInt<15>("h0") @[Reg_ID.scala 29:15]
      else :
        InstReg <= io.inst_in @[Reg_ID.scala 31:17]
        pcReg <= io.pc_in @[Reg_ID.scala 32:15]
    io.inst <= InstReg @[Reg_ID.scala 35:13]
    io.pc <= pcReg @[Reg_ID.scala 36:11]

  module Reg_EXE :
    input clock : Clock
    input reset : Reset
    output io : { flip Flush : UInt<1>, flip Stall : UInt<1>, flip inst_in : UInt<32>, flip pc_in : UInt<15>, flip rs1_rdata_in : UInt<32>, flip rs2_rdata_in : UInt<32>, flip imm_in : UInt<32>, inst : UInt<32>, pc : UInt<15>, rs1_rdata : UInt<32>, rs2_rdata : UInt<32>, imm : UInt<32>}

    reg pcReg : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[Reg_EXE.scala 27:25]
    reg InstReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_EXE.scala 28:26]
    reg immReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_EXE.scala 29:25]
    reg rs1Reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_EXE.scala 30:25]
    reg rs2Reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_EXE.scala 31:25]
    when io.Stall : @[Reg_EXE.scala 34:19]
      immReg <= immReg @[Reg_EXE.scala 35:16]
      InstReg <= InstReg @[Reg_EXE.scala 36:17]
      pcReg <= pcReg @[Reg_EXE.scala 37:15]
      rs1Reg <= rs1Reg @[Reg_EXE.scala 38:16]
      rs2Reg <= rs2Reg @[Reg_EXE.scala 39:16]
    else :
      when io.Flush : @[Reg_EXE.scala 40:25]
        immReg <= UInt<32>("h0") @[Reg_EXE.scala 41:16]
        InstReg <= UInt<32>("h0") @[Reg_EXE.scala 42:17]
        pcReg <= UInt<15>("h0") @[Reg_EXE.scala 43:15]
        rs1Reg <= UInt<32>("h0") @[Reg_EXE.scala 44:16]
        rs2Reg <= UInt<32>("h0") @[Reg_EXE.scala 45:16]
      else :
        InstReg <= io.inst_in @[Reg_EXE.scala 47:17]
        immReg <= io.imm_in @[Reg_EXE.scala 48:16]
        pcReg <= io.pc_in @[Reg_EXE.scala 49:15]
        rs1Reg <= io.rs1_rdata_in @[Reg_EXE.scala 50:16]
        rs2Reg <= io.rs2_rdata_in @[Reg_EXE.scala 51:16]
    io.inst <= InstReg @[Reg_EXE.scala 54:13]
    io.imm <= immReg @[Reg_EXE.scala 55:12]
    io.pc <= pcReg @[Reg_EXE.scala 56:11]
    io.rs1_rdata <= rs1Reg @[Reg_EXE.scala 57:18]
    io.rs2_rdata <= rs2Reg @[Reg_EXE.scala 58:18]

  module Reg_MEM :
    input clock : Clock
    input reset : Reset
    output io : { flip Stall : UInt<1>, flip pc_in : UInt<15>, flip inst_in : UInt<32>, flip alu_out_in : UInt<32>, flip DM_wdata_in : UInt<32>, pc : UInt<15>, inst : UInt<32>, alu_out : UInt<32>, DM_wdata : UInt<32>}

    reg InstReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_MEM.scala 22:26]
    reg pcReg : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[Reg_MEM.scala 23:25]
    reg aluReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_MEM.scala 24:25]
    reg wdataReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_MEM.scala 25:27]
    when io.Stall : @[Reg_MEM.scala 28:19]
      InstReg <= InstReg @[Reg_MEM.scala 29:17]
      pcReg <= pcReg @[Reg_MEM.scala 30:15]
      aluReg <= aluReg @[Reg_MEM.scala 31:16]
      wdataReg <= wdataReg @[Reg_MEM.scala 32:18]
    else :
      InstReg <= io.inst_in @[Reg_MEM.scala 34:17]
      pcReg <= io.pc_in @[Reg_MEM.scala 35:15]
      aluReg <= io.alu_out_in @[Reg_MEM.scala 36:16]
      wdataReg <= io.DM_wdata_in @[Reg_MEM.scala 37:18]
    io.inst <= InstReg @[Reg_MEM.scala 40:13]
    io.pc <= pcReg @[Reg_MEM.scala 41:11]
    io.alu_out <= aluReg @[Reg_MEM.scala 42:16]
    io.DM_wdata <= wdataReg @[Reg_MEM.scala 43:17]

  module Reg_WB :
    input clock : Clock
    input reset : Reset
    output io : { flip Stall : UInt<1>, flip pc_plus4_in : UInt<15>, flip inst_in : UInt<32>, flip alu_out_in : UInt<32>, flip ld_data_in : UInt<32>, pc_plus4 : UInt<15>, inst : UInt<32>, alu_out : UInt<32>, ld_data : UInt<32>}

    reg pc_plus4_Reg : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[Reg_WB.scala 22:32]
    reg InstReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_WB.scala 23:26]
    reg alu_out_Reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_WB.scala 24:30]
    reg ld_data_Reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Reg_WB.scala 25:30]
    when io.Stall : @[Reg_WB.scala 28:19]
      pc_plus4_Reg <= pc_plus4_Reg @[Reg_WB.scala 29:22]
      InstReg <= InstReg @[Reg_WB.scala 30:17]
      alu_out_Reg <= alu_out_Reg @[Reg_WB.scala 31:21]
      ld_data_Reg <= ld_data_Reg @[Reg_WB.scala 32:21]
    else :
      pc_plus4_Reg <= io.pc_plus4_in @[Reg_WB.scala 34:22]
      InstReg <= io.inst_in @[Reg_WB.scala 35:17]
      alu_out_Reg <= io.alu_out_in @[Reg_WB.scala 36:21]
      ld_data_Reg <= io.ld_data_in @[Reg_WB.scala 37:21]
    io.pc_plus4 <= pc_plus4_Reg @[Reg_WB.scala 40:17]
    io.inst <= InstReg @[Reg_WB.scala 41:13]
    io.alu_out <= alu_out_Reg @[Reg_WB.scala 42:16]
    io.ld_data <= ld_data_Reg @[Reg_WB.scala 43:16]

  module Path_IF :
    input clock : Clock
    input reset : Reset
    output io : { flip PCSel : UInt<2>, flip IF_pc_in : UInt<15>, flip EXE_pc_in : UInt<15>, flip EXE_target_pc_in : UInt<15>, flip Mem_data : UInt<32>, next_pc : UInt<15>, Mem_Addr : UInt<15>, inst : UInt<32>}

    node _io_next_pc_T = add(io.IF_pc_in, UInt<15>("h4")) @[Path_IF.scala 23:52]
    node _io_next_pc_T_1 = tail(_io_next_pc_T, 1) @[Path_IF.scala 23:52]
    node _io_next_pc_T_2 = add(io.IF_pc_in, UInt<15>("h4")) @[Path_IF.scala 24:38]
    node _io_next_pc_T_3 = tail(_io_next_pc_T_2, 1) @[Path_IF.scala 24:38]
    node _io_next_pc_T_4 = add(io.EXE_pc_in, UInt<15>("h4")) @[Path_IF.scala 25:40]
    node _io_next_pc_T_5 = tail(_io_next_pc_T_4, 1) @[Path_IF.scala 25:40]
    node _io_next_pc_T_6 = eq(UInt<1>("h0"), io.PCSel) @[Mux.scala 81:61]
    node _io_next_pc_T_7 = mux(_io_next_pc_T_6, _io_next_pc_T_3, _io_next_pc_T_1) @[Mux.scala 81:58]
    node _io_next_pc_T_8 = eq(UInt<1>("h1"), io.PCSel) @[Mux.scala 81:61]
    node _io_next_pc_T_9 = mux(_io_next_pc_T_8, _io_next_pc_T_5, _io_next_pc_T_7) @[Mux.scala 81:58]
    node _io_next_pc_T_10 = eq(UInt<2>("h2"), io.PCSel) @[Mux.scala 81:61]
    node _io_next_pc_T_11 = mux(_io_next_pc_T_10, io.EXE_target_pc_in, _io_next_pc_T_9) @[Mux.scala 81:58]
    io.next_pc <= _io_next_pc_T_11 @[Path_IF.scala 23:16]
    io.Mem_Addr <= io.IF_pc_in @[Path_IF.scala 29:17]
    io.inst <= io.Mem_data @[Path_IF.scala 30:13]

  module RegFile :
    input clock : Clock
    input reset : Reset
    output io : { flip wen : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<32>, flip raddr : UInt<5>[2], rdata : UInt<32>[2], regs : UInt<32>[32]}

    wire _regs_WIRE : UInt<32>[32] @[RegFile.scala 16:29]
    _regs_WIRE[0] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[1] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[2] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[3] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[4] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[5] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[6] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[7] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[8] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[9] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[10] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[11] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[12] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[13] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[14] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[15] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[16] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[17] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[18] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[19] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[20] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[21] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[22] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[23] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[24] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[25] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[26] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[27] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[28] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[29] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[30] <= UInt<32>("h0") @[RegFile.scala 16:29]
    _regs_WIRE[31] <= UInt<32>("h0") @[RegFile.scala 16:29]
    reg regs : UInt<32>[32], clock with :
      reset => (reset, _regs_WIRE) @[RegFile.scala 16:21]
    io.rdata[0] <= regs[io.raddr[0]] @[RegFile.scala 22:52]
    io.rdata[1] <= regs[io.raddr[1]] @[RegFile.scala 22:52]
    when io.wen : @[RegFile.scala 23:16]
      regs[io.waddr] <= io.wdata @[RegFile.scala 23:32]
    regs[0] <= UInt<1>("h0") @[RegFile.scala 24:11]
    io.regs <= regs @[RegFile.scala 26:11]

  module ImmGen :
    input clock : Clock
    input reset : Reset
    output io : { flip inst_31_7 : UInt<25>, flip ImmSel : UInt<3>, imm : UInt<32>}

    wire inst_shift : UInt<32> @[ImmGen.scala 15:26]
    node _inst_shift_T = cat(io.inst_31_7, UInt<7>("h0")) @[Cat.scala 33:92]
    inst_shift <= _inst_shift_T @[ImmGen.scala 16:16]
    wire simm : SInt<32> @[ImmGen.scala 18:20]
    node _simm_T = bits(inst_shift, 31, 20) @[ImmGen.scala 25:29]
    node _simm_T_1 = asSInt(_simm_T) @[ImmGen.scala 25:37]
    node _simm_T_2 = bits(inst_shift, 31, 31) @[ImmGen.scala 28:33]
    node _simm_T_3 = bits(inst_shift, 7, 7) @[ImmGen.scala 29:28]
    node _simm_T_4 = bits(inst_shift, 30, 25) @[ImmGen.scala 30:28]
    node _simm_T_5 = bits(inst_shift, 11, 8) @[ImmGen.scala 31:28]
    node simm_lo = cat(_simm_T_5, UInt<1>("h0")) @[Cat.scala 33:92]
    node simm_hi_hi = cat(_simm_T_2, _simm_T_3) @[Cat.scala 33:92]
    node simm_hi = cat(simm_hi_hi, _simm_T_4) @[Cat.scala 33:92]
    node _simm_T_6 = cat(simm_hi, simm_lo) @[Cat.scala 33:92]
    node _simm_T_7 = asSInt(_simm_T_6) @[ImmGen.scala 32:28]
    node _simm_T_8 = bits(inst_shift, 31, 31) @[ImmGen.scala 35:33]
    node _simm_T_9 = bits(inst_shift, 30, 25) @[ImmGen.scala 36:27]
    node _simm_T_10 = bits(inst_shift, 11, 8) @[ImmGen.scala 37:27]
    node _simm_T_11 = bits(inst_shift, 7, 7) @[ImmGen.scala 38:27]
    node simm_lo_1 = cat(_simm_T_10, _simm_T_11) @[Cat.scala 33:92]
    node simm_hi_1 = cat(_simm_T_8, _simm_T_9) @[Cat.scala 33:92]
    node _simm_T_12 = cat(simm_hi_1, simm_lo_1) @[Cat.scala 33:92]
    node _simm_T_13 = asSInt(_simm_T_12) @[ImmGen.scala 38:32]
    node _simm_T_14 = bits(inst_shift, 31, 12) @[ImmGen.scala 41:33]
    node _simm_T_15 = cat(_simm_T_14, UInt<12>("h0")) @[Cat.scala 33:92]
    node _simm_T_16 = asSInt(_simm_T_15) @[ImmGen.scala 41:52]
    node _simm_T_17 = bits(inst_shift, 31, 31) @[ImmGen.scala 44:33]
    node _simm_T_18 = bits(inst_shift, 19, 12) @[ImmGen.scala 45:28]
    node _simm_T_19 = bits(inst_shift, 20, 20) @[ImmGen.scala 46:28]
    node _simm_T_20 = bits(inst_shift, 30, 21) @[ImmGen.scala 47:28]
    node simm_lo_2 = cat(_simm_T_20, UInt<1>("h0")) @[Cat.scala 33:92]
    node simm_hi_hi_1 = cat(_simm_T_17, _simm_T_18) @[Cat.scala 33:92]
    node simm_hi_2 = cat(simm_hi_hi_1, _simm_T_19) @[Cat.scala 33:92]
    node _simm_T_21 = cat(simm_hi_2, simm_lo_2) @[Cat.scala 33:92]
    node _simm_T_22 = asSInt(_simm_T_21) @[ImmGen.scala 48:28]
    node _simm_T_23 = eq(UInt<1>("h0"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_24 = mux(_simm_T_23, asSInt(UInt<1>("h0")), asSInt(UInt<1>("h0"))) @[Mux.scala 81:58]
    node _simm_T_25 = eq(UInt<1>("h1"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_26 = mux(_simm_T_25, _simm_T_1, _simm_T_24) @[Mux.scala 81:58]
    node _simm_T_27 = eq(UInt<2>("h3"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_28 = mux(_simm_T_27, _simm_T_7, _simm_T_26) @[Mux.scala 81:58]
    node _simm_T_29 = eq(UInt<2>("h2"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_30 = mux(_simm_T_29, _simm_T_13, _simm_T_28) @[Mux.scala 81:58]
    node _simm_T_31 = eq(UInt<3>("h5"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_32 = mux(_simm_T_31, _simm_T_16, _simm_T_30) @[Mux.scala 81:58]
    node _simm_T_33 = eq(UInt<3>("h4"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_34 = mux(_simm_T_33, _simm_T_22, _simm_T_32) @[Mux.scala 81:58]
    simm <= _simm_T_34 @[ImmGen.scala 20:10]
    node _io_imm_T = asUInt(simm) @[ImmGen.scala 52:20]
    io.imm <= _io_imm_T @[ImmGen.scala 52:12]

  module Path_ID :
    input clock : Clock
    input reset : Reset
    output io : { flip ID_inst_in : UInt<32>, flip WB_index : UInt<5>, flip WB_wdata : UInt<32>, flip WB_RegWEn : UInt<1>, flip ImmSel : UInt<3>, ID_rs1_rdata : UInt<32>, ID_rs2_rdata : UInt<32>, imm : UInt<32>, regs : UInt<32>[32]}

    node rs1_index = bits(io.ID_inst_in, 19, 15) @[Path_ID.scala 23:34]
    node rs2_index = bits(io.ID_inst_in, 24, 20) @[Path_ID.scala 24:34]
    inst rf of RegFile @[Path_ID.scala 27:20]
    rf.clock <= clock
    rf.reset <= reset
    rf.io.wen <= io.WB_RegWEn @[Path_ID.scala 28:15]
    rf.io.waddr <= io.WB_index @[Path_ID.scala 29:17]
    rf.io.wdata <= io.WB_wdata @[Path_ID.scala 30:17]
    rf.io.raddr[0] <= rs1_index @[Path_ID.scala 31:20]
    rf.io.raddr[1] <= rs2_index @[Path_ID.scala 32:20]
    io.ID_rs1_rdata <= rf.io.rdata[0] @[Path_ID.scala 33:21]
    io.ID_rs2_rdata <= rf.io.rdata[1] @[Path_ID.scala 34:21]
    io.regs <= rf.io.regs @[Path_ID.scala 35:13]
    inst ig of ImmGen @[Path_ID.scala 38:20]
    ig.clock <= clock
    ig.reset <= reset
    ig.io.ImmSel <= io.ImmSel @[Path_ID.scala 39:18]
    node _ig_io_inst_31_7_T = bits(io.ID_inst_in, 31, 7) @[Path_ID.scala 40:37]
    ig.io.inst_31_7 <= _ig_io_inst_31_7_T @[Path_ID.scala 40:21]
    io.imm <= ig.io.imm @[Path_ID.scala 41:12]

  module BranchComp :
    input clock : Clock
    input reset : Reset
    output io : { flip BrUn : UInt<1>, flip src1 : UInt<32>, flip src2 : UInt<32>, BrEq : UInt<1>, BrLT : UInt<1>}

    wire eq : UInt<1>
    eq <= UInt<1>("h0")
    wire lt : UInt<1>
    lt <= UInt<1>("h0")
    when io.BrUn : @[BranchComp.scala 19:18]
      node _T = lt(io.src1, io.src2) @[BranchComp.scala 20:20]
      when _T : @[BranchComp.scala 20:31]
        lt <= UInt<1>("h1") @[BranchComp.scala 20:36]
    else :
      node _T_1 = asSInt(io.src1) @[BranchComp.scala 22:20]
      node _T_2 = asSInt(io.src2) @[BranchComp.scala 22:37]
      node _T_3 = lt(_T_1, _T_2) @[BranchComp.scala 22:27]
      when _T_3 : @[BranchComp.scala 22:45]
        lt <= UInt<1>("h1") @[BranchComp.scala 22:50]
    node _eq_T = eq(io.src1, io.src2) @[BranchComp.scala 25:22]
    node _eq_T_1 = mux(_eq_T, UInt<1>("h1"), UInt<1>("h0")) @[BranchComp.scala 25:14]
    eq <= _eq_T_1 @[BranchComp.scala 25:8]
    io.BrEq <= eq @[BranchComp.scala 27:13]
    io.BrLT <= lt @[BranchComp.scala 28:13]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip src1 : UInt<32>, flip src2 : UInt<32>, flip ALUSel : UInt<15>, out : UInt<32>}

    wire result : UInt<1>[5] @[ALU.scala 19:20]
    wire val16 : UInt<16> @[ALU.scala 20:20]
    wire val8 : UInt<8> @[ALU.scala 21:20]
    wire val4 : UInt<4> @[ALU.scala 22:20]
    result[0] <= UInt<1>("h0") @[ALU.scala 24:13]
    result[1] <= UInt<1>("h0") @[ALU.scala 25:13]
    result[2] <= UInt<1>("h0") @[ALU.scala 26:13]
    result[3] <= UInt<1>("h0") @[ALU.scala 27:13]
    result[4] <= UInt<1>("h0") @[ALU.scala 28:13]
    val16 <= UInt<1>("h0") @[ALU.scala 29:10]
    val8 <= UInt<1>("h0") @[ALU.scala 30:10]
    val4 <= UInt<1>("h0") @[ALU.scala 31:10]
    io.out <= UInt<1>("h0") @[ALU.scala 33:10]
    node _T = eq(UInt<8>("hf8"), io.ALUSel) @[ALU.scala 34:20]
    when _T : @[ALU.scala 34:20]
      node _io_out_T = add(io.src1, io.src2) @[ALU.scala 35:31]
      node _io_out_T_1 = tail(_io_out_T, 1) @[ALU.scala 35:31]
      io.out <= _io_out_T_1 @[ALU.scala 35:21]
    else :
      node _T_1 = eq(UInt<8>("hf9"), io.ALUSel) @[ALU.scala 34:20]
      when _T_1 : @[ALU.scala 34:20]
        node _io_out_T_2 = bits(io.src2, 4, 0) @[ALU.scala 36:42]
        node _io_out_T_3 = dshl(io.src1, _io_out_T_2) @[ALU.scala 36:32]
        io.out <= _io_out_T_3 @[ALU.scala 36:21]
      else :
        node _T_2 = eq(UInt<8>("hfa"), io.ALUSel) @[ALU.scala 34:20]
        when _T_2 : @[ALU.scala 34:20]
          node _io_out_T_4 = asSInt(io.src1) @[ALU.scala 37:36]
          node _io_out_T_5 = asSInt(io.src2) @[ALU.scala 37:53]
          node _io_out_T_6 = lt(_io_out_T_4, _io_out_T_5) @[ALU.scala 37:43]
          node _io_out_T_7 = mux(_io_out_T_6, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 37:27]
          io.out <= _io_out_T_7 @[ALU.scala 37:21]
        else :
          node _T_3 = eq(UInt<8>("hfb"), io.ALUSel) @[ALU.scala 34:20]
          when _T_3 : @[ALU.scala 34:20]
            node _io_out_T_8 = lt(io.src1, io.src2) @[ALU.scala 38:36]
            node _io_out_T_9 = mux(_io_out_T_8, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 38:27]
            io.out <= _io_out_T_9 @[ALU.scala 38:21]
          else :
            node _T_4 = eq(UInt<8>("hfc"), io.ALUSel) @[ALU.scala 34:20]
            when _T_4 : @[ALU.scala 34:20]
              node _io_out_T_10 = xor(io.src1, io.src2) @[ALU.scala 39:32]
              io.out <= _io_out_T_10 @[ALU.scala 39:21]
            else :
              node _T_5 = eq(UInt<8>("hfd"), io.ALUSel) @[ALU.scala 34:20]
              when _T_5 : @[ALU.scala 34:20]
                node _io_out_T_11 = bits(io.src2, 4, 0) @[ALU.scala 40:42]
                node _io_out_T_12 = dshr(io.src1, _io_out_T_11) @[ALU.scala 40:32]
                io.out <= _io_out_T_12 @[ALU.scala 40:21]
              else :
                node _T_6 = eq(UInt<8>("hfe"), io.ALUSel) @[ALU.scala 34:20]
                when _T_6 : @[ALU.scala 34:20]
                  node _io_out_T_13 = or(io.src1, io.src2) @[ALU.scala 41:32]
                  io.out <= _io_out_T_13 @[ALU.scala 41:21]
                else :
                  node _T_7 = eq(UInt<8>("hff"), io.ALUSel) @[ALU.scala 34:20]
                  when _T_7 : @[ALU.scala 34:20]
                    node _io_out_T_14 = and(io.src1, io.src2) @[ALU.scala 42:32]
                    io.out <= _io_out_T_14 @[ALU.scala 42:21]
                  else :
                    node _T_8 = eq(UInt<14>("h20f8"), io.ALUSel) @[ALU.scala 34:20]
                    when _T_8 : @[ALU.scala 34:20]
                      node _io_out_T_15 = sub(io.src1, io.src2) @[ALU.scala 43:32]
                      node _io_out_T_16 = tail(_io_out_T_15, 1) @[ALU.scala 43:32]
                      io.out <= _io_out_T_16 @[ALU.scala 43:21]
                    else :
                      node _T_9 = eq(UInt<14>("h20fd"), io.ALUSel) @[ALU.scala 34:20]
                      when _T_9 : @[ALU.scala 34:20]
                        node _io_out_T_17 = asSInt(io.src1) @[ALU.scala 44:33]
                        node _io_out_T_18 = bits(io.src2, 4, 0) @[ALU.scala 44:50]
                        node _io_out_T_19 = dshr(_io_out_T_17, _io_out_T_18) @[ALU.scala 44:40]
                        node _io_out_T_20 = asUInt(_io_out_T_19) @[ALU.scala 44:57]
                        io.out <= _io_out_T_20 @[ALU.scala 44:21]
                      else :
                        node _T_10 = eq(UInt<14>("h3001"), io.ALUSel) @[ALU.scala 34:20]
                        when _T_10 : @[ALU.scala 34:20]
                          node _result_4_T = bits(io.src1, 31, 16) @[ALU.scala 46:28]
                          node _result_4_T_1 = eq(_result_4_T, UInt<1>("h0")) @[ALU.scala 46:36]
                          result[4] <= _result_4_T_1 @[ALU.scala 46:17]
                          node _val16_T = bits(io.src1, 15, 0) @[ALU.scala 47:42]
                          node _val16_T_1 = bits(io.src1, 31, 16) @[ALU.scala 47:57]
                          node _val16_T_2 = mux(result[4], _val16_T, _val16_T_1) @[ALU.scala 47:23]
                          val16 <= _val16_T_2 @[ALU.scala 47:17]
                          node _result_3_T = bits(val16, 15, 8) @[ALU.scala 48:26]
                          node _result_3_T_1 = eq(_result_3_T, UInt<1>("h0")) @[ALU.scala 48:33]
                          result[3] <= _result_3_T_1 @[ALU.scala 48:17]
                          node _val8_T = bits(val16, 7, 0) @[ALU.scala 49:40]
                          node _val8_T_1 = bits(val16, 15, 8) @[ALU.scala 49:52]
                          node _val8_T_2 = mux(result[3], _val8_T, _val8_T_1) @[ALU.scala 49:23]
                          val8 <= _val8_T_2 @[ALU.scala 49:17]
                          node _result_2_T = bits(val8, 7, 4) @[ALU.scala 50:25]
                          node _result_2_T_1 = eq(_result_2_T, UInt<1>("h0")) @[ALU.scala 50:31]
                          result[2] <= _result_2_T_1 @[ALU.scala 50:17]
                          node _val4_T = bits(val8, 3, 0) @[ALU.scala 51:39]
                          node _val4_T_1 = bits(val8, 7, 4) @[ALU.scala 51:50]
                          node _val4_T_2 = mux(result[2], _val4_T, _val4_T_1) @[ALU.scala 51:23]
                          val4 <= _val4_T_2 @[ALU.scala 51:17]
                          node _result_1_T = bits(val4, 3, 2) @[ALU.scala 52:25]
                          node _result_1_T_1 = eq(_result_1_T, UInt<1>("h0")) @[ALU.scala 52:31]
                          result[1] <= _result_1_T_1 @[ALU.scala 52:17]
                          node _result_0_T = bits(val4, 1, 1) @[ALU.scala 53:40]
                          node _result_0_T_1 = not(_result_0_T) @[ALU.scala 53:35]
                          node _result_0_T_2 = bits(val4, 3, 3) @[ALU.scala 53:50]
                          node _result_0_T_3 = not(_result_0_T_2) @[ALU.scala 53:45]
                          node _result_0_T_4 = mux(result[1], _result_0_T_1, _result_0_T_3) @[ALU.scala 53:23]
                          result[0] <= _result_0_T_4 @[ALU.scala 53:17]
                          node io_out_lo = cat(result[1], result[0]) @[Cat.scala 33:92]
                          node io_out_hi_hi = cat(result[4], result[3]) @[Cat.scala 33:92]
                          node io_out_hi = cat(io_out_hi_hi, result[2]) @[Cat.scala 33:92]
                          node _io_out_T_21 = cat(io_out_hi, io_out_lo) @[Cat.scala 33:92]
                          io.out <= _io_out_T_21 @[ALU.scala 54:14]
                        else :
                          node _T_11 = eq(UInt<14>("h3009"), io.ALUSel) @[ALU.scala 34:20]
                          when _T_11 : @[ALU.scala 34:20]
                            node _result_4_T_2 = bits(io.src1, 15, 0) @[ALU.scala 57:28]
                            node _result_4_T_3 = eq(_result_4_T_2, UInt<1>("h0")) @[ALU.scala 57:35]
                            result[4] <= _result_4_T_3 @[ALU.scala 57:17]
                            node _val16_T_3 = bits(io.src1, 31, 16) @[ALU.scala 58:42]
                            node _val16_T_4 = bits(io.src1, 15, 0) @[ALU.scala 58:58]
                            node _val16_T_5 = mux(result[4], _val16_T_3, _val16_T_4) @[ALU.scala 58:23]
                            val16 <= _val16_T_5 @[ALU.scala 58:17]
                            node _result_3_T_2 = bits(val16, 7, 0) @[ALU.scala 59:26]
                            node _result_3_T_3 = eq(_result_3_T_2, UInt<1>("h0")) @[ALU.scala 59:32]
                            result[3] <= _result_3_T_3 @[ALU.scala 59:17]
                            node _val8_T_3 = bits(val16, 15, 8) @[ALU.scala 60:40]
                            node _val8_T_4 = bits(val16, 7, 0) @[ALU.scala 60:53]
                            node _val8_T_5 = mux(result[3], _val8_T_3, _val8_T_4) @[ALU.scala 60:23]
                            val8 <= _val8_T_5 @[ALU.scala 60:17]
                            node _result_2_T_2 = bits(val8, 3, 0) @[ALU.scala 61:25]
                            node _result_2_T_3 = eq(_result_2_T_2, UInt<1>("h0")) @[ALU.scala 61:31]
                            result[2] <= _result_2_T_3 @[ALU.scala 61:17]
                            node _val4_T_3 = bits(val8, 7, 4) @[ALU.scala 62:39]
                            node _val4_T_4 = bits(val8, 3, 0) @[ALU.scala 62:50]
                            node _val4_T_5 = mux(result[2], _val4_T_3, _val4_T_4) @[ALU.scala 62:23]
                            val4 <= _val4_T_5 @[ALU.scala 62:17]
                            node _result_1_T_2 = bits(val4, 1, 0) @[ALU.scala 63:25]
                            node _result_1_T_3 = eq(_result_1_T_2, UInt<1>("h0")) @[ALU.scala 63:31]
                            result[1] <= _result_1_T_3 @[ALU.scala 63:17]
                            node _result_0_T_5 = bits(val4, 3, 3) @[ALU.scala 64:39]
                            node _result_0_T_6 = bits(val4, 1, 1) @[ALU.scala 64:48]
                            node _result_0_T_7 = mux(result[1], _result_0_T_5, _result_0_T_6) @[ALU.scala 64:23]
                            result[0] <= _result_0_T_7 @[ALU.scala 64:17]
                            node io_out_lo_1 = cat(result[1], result[0]) @[Cat.scala 33:92]
                            node io_out_hi_hi_1 = cat(result[4], result[3]) @[Cat.scala 33:92]
                            node io_out_hi_1 = cat(io_out_hi_hi_1, result[2]) @[Cat.scala 33:92]
                            node _io_out_T_22 = cat(io_out_hi_1, io_out_lo_1) @[Cat.scala 33:92]
                            io.out <= _io_out_T_22 @[ALU.scala 65:14]
                          else :
                            node _T_12 = eq(UInt<14>("h3011"), io.ALUSel) @[ALU.scala 34:20]
                            when _T_12 : @[ALU.scala 34:20]
                              wire result_1 : UInt<5> @[ALU.scala 68:24]
                              node _result_T = bits(io.src1, 0, 0) @[Bitwise.scala 53:100]
                              node _result_T_1 = bits(io.src1, 1, 1) @[Bitwise.scala 53:100]
                              node _result_T_2 = bits(io.src1, 2, 2) @[Bitwise.scala 53:100]
                              node _result_T_3 = bits(io.src1, 3, 3) @[Bitwise.scala 53:100]
                              node _result_T_4 = bits(io.src1, 4, 4) @[Bitwise.scala 53:100]
                              node _result_T_5 = bits(io.src1, 5, 5) @[Bitwise.scala 53:100]
                              node _result_T_6 = bits(io.src1, 6, 6) @[Bitwise.scala 53:100]
                              node _result_T_7 = bits(io.src1, 7, 7) @[Bitwise.scala 53:100]
                              node _result_T_8 = bits(io.src1, 8, 8) @[Bitwise.scala 53:100]
                              node _result_T_9 = bits(io.src1, 9, 9) @[Bitwise.scala 53:100]
                              node _result_T_10 = bits(io.src1, 10, 10) @[Bitwise.scala 53:100]
                              node _result_T_11 = bits(io.src1, 11, 11) @[Bitwise.scala 53:100]
                              node _result_T_12 = bits(io.src1, 12, 12) @[Bitwise.scala 53:100]
                              node _result_T_13 = bits(io.src1, 13, 13) @[Bitwise.scala 53:100]
                              node _result_T_14 = bits(io.src1, 14, 14) @[Bitwise.scala 53:100]
                              node _result_T_15 = bits(io.src1, 15, 15) @[Bitwise.scala 53:100]
                              node _result_T_16 = bits(io.src1, 16, 16) @[Bitwise.scala 53:100]
                              node _result_T_17 = bits(io.src1, 17, 17) @[Bitwise.scala 53:100]
                              node _result_T_18 = bits(io.src1, 18, 18) @[Bitwise.scala 53:100]
                              node _result_T_19 = bits(io.src1, 19, 19) @[Bitwise.scala 53:100]
                              node _result_T_20 = bits(io.src1, 20, 20) @[Bitwise.scala 53:100]
                              node _result_T_21 = bits(io.src1, 21, 21) @[Bitwise.scala 53:100]
                              node _result_T_22 = bits(io.src1, 22, 22) @[Bitwise.scala 53:100]
                              node _result_T_23 = bits(io.src1, 23, 23) @[Bitwise.scala 53:100]
                              node _result_T_24 = bits(io.src1, 24, 24) @[Bitwise.scala 53:100]
                              node _result_T_25 = bits(io.src1, 25, 25) @[Bitwise.scala 53:100]
                              node _result_T_26 = bits(io.src1, 26, 26) @[Bitwise.scala 53:100]
                              node _result_T_27 = bits(io.src1, 27, 27) @[Bitwise.scala 53:100]
                              node _result_T_28 = bits(io.src1, 28, 28) @[Bitwise.scala 53:100]
                              node _result_T_29 = bits(io.src1, 29, 29) @[Bitwise.scala 53:100]
                              node _result_T_30 = bits(io.src1, 30, 30) @[Bitwise.scala 53:100]
                              node _result_T_31 = bits(io.src1, 31, 31) @[Bitwise.scala 53:100]
                              node _result_T_32 = add(_result_T, _result_T_1) @[Bitwise.scala 51:90]
                              node _result_T_33 = bits(_result_T_32, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_34 = add(_result_T_2, _result_T_3) @[Bitwise.scala 51:90]
                              node _result_T_35 = bits(_result_T_34, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_36 = add(_result_T_33, _result_T_35) @[Bitwise.scala 51:90]
                              node _result_T_37 = bits(_result_T_36, 2, 0) @[Bitwise.scala 51:90]
                              node _result_T_38 = add(_result_T_4, _result_T_5) @[Bitwise.scala 51:90]
                              node _result_T_39 = bits(_result_T_38, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_40 = add(_result_T_6, _result_T_7) @[Bitwise.scala 51:90]
                              node _result_T_41 = bits(_result_T_40, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_42 = add(_result_T_39, _result_T_41) @[Bitwise.scala 51:90]
                              node _result_T_43 = bits(_result_T_42, 2, 0) @[Bitwise.scala 51:90]
                              node _result_T_44 = add(_result_T_37, _result_T_43) @[Bitwise.scala 51:90]
                              node _result_T_45 = bits(_result_T_44, 3, 0) @[Bitwise.scala 51:90]
                              node _result_T_46 = add(_result_T_8, _result_T_9) @[Bitwise.scala 51:90]
                              node _result_T_47 = bits(_result_T_46, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_48 = add(_result_T_10, _result_T_11) @[Bitwise.scala 51:90]
                              node _result_T_49 = bits(_result_T_48, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_50 = add(_result_T_47, _result_T_49) @[Bitwise.scala 51:90]
                              node _result_T_51 = bits(_result_T_50, 2, 0) @[Bitwise.scala 51:90]
                              node _result_T_52 = add(_result_T_12, _result_T_13) @[Bitwise.scala 51:90]
                              node _result_T_53 = bits(_result_T_52, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_54 = add(_result_T_14, _result_T_15) @[Bitwise.scala 51:90]
                              node _result_T_55 = bits(_result_T_54, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_56 = add(_result_T_53, _result_T_55) @[Bitwise.scala 51:90]
                              node _result_T_57 = bits(_result_T_56, 2, 0) @[Bitwise.scala 51:90]
                              node _result_T_58 = add(_result_T_51, _result_T_57) @[Bitwise.scala 51:90]
                              node _result_T_59 = bits(_result_T_58, 3, 0) @[Bitwise.scala 51:90]
                              node _result_T_60 = add(_result_T_45, _result_T_59) @[Bitwise.scala 51:90]
                              node _result_T_61 = bits(_result_T_60, 4, 0) @[Bitwise.scala 51:90]
                              node _result_T_62 = add(_result_T_16, _result_T_17) @[Bitwise.scala 51:90]
                              node _result_T_63 = bits(_result_T_62, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_64 = add(_result_T_18, _result_T_19) @[Bitwise.scala 51:90]
                              node _result_T_65 = bits(_result_T_64, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_66 = add(_result_T_63, _result_T_65) @[Bitwise.scala 51:90]
                              node _result_T_67 = bits(_result_T_66, 2, 0) @[Bitwise.scala 51:90]
                              node _result_T_68 = add(_result_T_20, _result_T_21) @[Bitwise.scala 51:90]
                              node _result_T_69 = bits(_result_T_68, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_70 = add(_result_T_22, _result_T_23) @[Bitwise.scala 51:90]
                              node _result_T_71 = bits(_result_T_70, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_72 = add(_result_T_69, _result_T_71) @[Bitwise.scala 51:90]
                              node _result_T_73 = bits(_result_T_72, 2, 0) @[Bitwise.scala 51:90]
                              node _result_T_74 = add(_result_T_67, _result_T_73) @[Bitwise.scala 51:90]
                              node _result_T_75 = bits(_result_T_74, 3, 0) @[Bitwise.scala 51:90]
                              node _result_T_76 = add(_result_T_24, _result_T_25) @[Bitwise.scala 51:90]
                              node _result_T_77 = bits(_result_T_76, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_78 = add(_result_T_26, _result_T_27) @[Bitwise.scala 51:90]
                              node _result_T_79 = bits(_result_T_78, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_80 = add(_result_T_77, _result_T_79) @[Bitwise.scala 51:90]
                              node _result_T_81 = bits(_result_T_80, 2, 0) @[Bitwise.scala 51:90]
                              node _result_T_82 = add(_result_T_28, _result_T_29) @[Bitwise.scala 51:90]
                              node _result_T_83 = bits(_result_T_82, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_84 = add(_result_T_30, _result_T_31) @[Bitwise.scala 51:90]
                              node _result_T_85 = bits(_result_T_84, 1, 0) @[Bitwise.scala 51:90]
                              node _result_T_86 = add(_result_T_83, _result_T_85) @[Bitwise.scala 51:90]
                              node _result_T_87 = bits(_result_T_86, 2, 0) @[Bitwise.scala 51:90]
                              node _result_T_88 = add(_result_T_81, _result_T_87) @[Bitwise.scala 51:90]
                              node _result_T_89 = bits(_result_T_88, 3, 0) @[Bitwise.scala 51:90]
                              node _result_T_90 = add(_result_T_75, _result_T_89) @[Bitwise.scala 51:90]
                              node _result_T_91 = bits(_result_T_90, 4, 0) @[Bitwise.scala 51:90]
                              node _result_T_92 = add(_result_T_61, _result_T_91) @[Bitwise.scala 51:90]
                              node _result_T_93 = bits(_result_T_92, 5, 0) @[Bitwise.scala 51:90]
                              result_1 <= _result_T_93 @[ALU.scala 69:14]
                              io.out <= result_1 @[ALU.scala 70:14]
                            else :
                              node _T_13 = eq(UInt<14>("h20ff"), io.ALUSel) @[ALU.scala 34:20]
                              when _T_13 : @[ALU.scala 34:20]
                                node _io_out_T_23 = not(io.src2) @[ALU.scala 72:34]
                                node _io_out_T_24 = and(io.src1, _io_out_T_23) @[ALU.scala 72:32]
                                io.out <= _io_out_T_24 @[ALU.scala 72:21]
                              else :
                                node _T_14 = eq(UInt<14>("h20fe"), io.ALUSel) @[ALU.scala 34:20]
                                when _T_14 : @[ALU.scala 34:20]
                                  node _io_out_T_25 = not(io.src2) @[ALU.scala 73:34]
                                  node _io_out_T_26 = or(io.src1, _io_out_T_25) @[ALU.scala 73:32]
                                  io.out <= _io_out_T_26 @[ALU.scala 73:21]
                                else :
                                  node _T_15 = eq(UInt<14>("h20fc"), io.ALUSel) @[ALU.scala 34:20]
                                  when _T_15 : @[ALU.scala 34:20]
                                    node _io_out_T_27 = not(io.src2) @[ALU.scala 74:34]
                                    node _io_out_T_28 = xor(io.src1, _io_out_T_27) @[ALU.scala 74:32]
                                    io.out <= _io_out_T_28 @[ALU.scala 74:21]
                                  else :
                                    node _T_16 = eq(UInt<11>("h5fc"), io.ALUSel) @[ALU.scala 34:20]
                                    when _T_16 : @[ALU.scala 34:20]
                                      node _io_out_T_29 = asSInt(io.src1) @[ALU.scala 75:36]
                                      node _io_out_T_30 = asSInt(io.src2) @[ALU.scala 75:53]
                                      node _io_out_T_31 = lt(_io_out_T_29, _io_out_T_30) @[ALU.scala 75:43]
                                      node _io_out_T_32 = mux(_io_out_T_31, io.src1, io.src2) @[ALU.scala 75:27]
                                      io.out <= _io_out_T_32 @[ALU.scala 75:21]
                                    else :
                                      node _T_17 = eq(UInt<11>("h5fe"), io.ALUSel) @[ALU.scala 34:20]
                                      when _T_17 : @[ALU.scala 34:20]
                                        node _io_out_T_33 = asSInt(io.src1) @[ALU.scala 76:36]
                                        node _io_out_T_34 = asSInt(io.src2) @[ALU.scala 76:53]
                                        node _io_out_T_35 = lt(_io_out_T_33, _io_out_T_34) @[ALU.scala 76:43]
                                        node _io_out_T_36 = mux(_io_out_T_35, io.src2, io.src1) @[ALU.scala 76:27]
                                        io.out <= _io_out_T_36 @[ALU.scala 76:21]
                                      else :
                                        node _T_18 = eq(UInt<11>("h5fd"), io.ALUSel) @[ALU.scala 34:20]
                                        when _T_18 : @[ALU.scala 34:20]
                                          node _io_out_T_37 = lt(io.src1, io.src2) @[ALU.scala 77:36]
                                          node _io_out_T_38 = mux(_io_out_T_37, io.src1, io.src2) @[ALU.scala 77:27]
                                          io.out <= _io_out_T_38 @[ALU.scala 77:21]
                                        else :
                                          node _T_19 = eq(UInt<11>("h5ff"), io.ALUSel) @[ALU.scala 34:20]
                                          when _T_19 : @[ALU.scala 34:20]
                                            node _io_out_T_39 = lt(io.src1, io.src2) @[ALU.scala 78:36]
                                            node _io_out_T_40 = mux(_io_out_T_39, io.src2, io.src1) @[ALU.scala 78:27]
                                            io.out <= _io_out_T_40 @[ALU.scala 78:21]
                                          else :
                                            node _T_20 = eq(UInt<14>("h3021"), io.ALUSel) @[ALU.scala 34:20]
                                            when _T_20 : @[ALU.scala 34:20]
                                              node _io_out_T_41 = bits(io.src1, 7, 7) @[ALU.scala 79:46]
                                              node _io_out_T_42 = bits(_io_out_T_41, 0, 0) @[Bitwise.scala 77:15]
                                              node _io_out_T_43 = mux(_io_out_T_42, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                                              node _io_out_T_44 = bits(io.src1, 7, 0) @[ALU.scala 79:59]
                                              node _io_out_T_45 = cat(_io_out_T_43, _io_out_T_44) @[Cat.scala 33:92]
                                              io.out <= _io_out_T_45 @[ALU.scala 79:23]
                                            else :
                                              node _T_21 = eq(UInt<14>("h3029"), io.ALUSel) @[ALU.scala 34:20]
                                              when _T_21 : @[ALU.scala 34:20]
                                                node _io_out_T_46 = bits(io.src1, 15, 15) @[ALU.scala 80:46]
                                                node _io_out_T_47 = bits(_io_out_T_46, 0, 0) @[Bitwise.scala 77:15]
                                                node _io_out_T_48 = mux(_io_out_T_47, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                                                node _io_out_T_49 = bits(io.src1, 15, 0) @[ALU.scala 80:60]
                                                node _io_out_T_50 = cat(_io_out_T_48, _io_out_T_49) @[Cat.scala 33:92]
                                                io.out <= _io_out_T_50 @[ALU.scala 80:23]
                                              else :
                                                node _T_22 = eq(UInt<13>("h14f9"), io.ALUSel) @[ALU.scala 34:20]
                                                when _T_22 : @[ALU.scala 34:20]
                                                  node _io_out_T_51 = bits(io.src2, 4, 0) @[ALU.scala 81:51]
                                                  node _io_out_T_52 = and(_io_out_T_51, UInt<5>("h1f")) @[ALU.scala 81:57]
                                                  node _io_out_T_53 = dshl(UInt<1>("h1"), _io_out_T_52) @[ALU.scala 81:40]
                                                  node _io_out_T_54 = or(io.src1, _io_out_T_53) @[ALU.scala 81:33]
                                                  io.out <= _io_out_T_54 @[ALU.scala 81:22]
                                                else :
                                                  node _T_23 = eq(UInt<14>("h24f9"), io.ALUSel) @[ALU.scala 34:20]
                                                  when _T_23 : @[ALU.scala 34:20]
                                                    node _io_out_T_55 = bits(io.src2, 4, 0) @[ALU.scala 82:52]
                                                    node _io_out_T_56 = and(_io_out_T_55, UInt<5>("h1f")) @[ALU.scala 82:58]
                                                    node _io_out_T_57 = dshl(UInt<1>("h1"), _io_out_T_56) @[ALU.scala 82:41]
                                                    node _io_out_T_58 = not(_io_out_T_57) @[ALU.scala 82:35]
                                                    node _io_out_T_59 = and(io.src1, _io_out_T_58) @[ALU.scala 82:33]
                                                    io.out <= _io_out_T_59 @[ALU.scala 82:22]
                                                  else :
                                                    node _T_24 = eq(UInt<14>("h34f9"), io.ALUSel) @[ALU.scala 34:20]
                                                    when _T_24 : @[ALU.scala 34:20]
                                                      node _io_out_T_60 = bits(io.src2, 4, 0) @[ALU.scala 84:51]
                                                      node _io_out_T_61 = and(_io_out_T_60, UInt<5>("h1f")) @[ALU.scala 84:57]
                                                      node _io_out_T_62 = dshl(UInt<1>("h1"), _io_out_T_61) @[ALU.scala 84:40]
                                                      node _io_out_T_63 = xor(io.src1, _io_out_T_62) @[ALU.scala 84:33]
                                                      io.out <= _io_out_T_63 @[ALU.scala 84:22]
                                                    else :
                                                      node _T_25 = eq(UInt<14>("h24fd"), io.ALUSel) @[ALU.scala 34:20]
                                                      when _T_25 : @[ALU.scala 34:20]
                                                        node _io_out_T_64 = bits(io.src2, 4, 0) @[ALU.scala 85:45]
                                                        node _io_out_T_65 = and(_io_out_T_64, UInt<5>("h1f")) @[ALU.scala 85:51]
                                                        node _io_out_T_66 = dshr(io.src1, _io_out_T_65) @[ALU.scala 85:34]
                                                        node _io_out_T_67 = bits(_io_out_T_66, 0, 0) @[ALU.scala 85:59]
                                                        io.out <= _io_out_T_67 @[ALU.scala 85:22]
                                                      else :
                                                        node _T_26 = eq(UInt<14>("h30fd"), io.ALUSel) @[ALU.scala 34:20]
                                                        when _T_26 : @[ALU.scala 34:20]
                                                          node _io_out_T_68 = bits(io.src2, 4, 0) @[ALU.scala 86:45]
                                                          node _io_out_T_69 = and(_io_out_T_68, UInt<5>("h1f")) @[ALU.scala 86:51]
                                                          node _io_out_T_70 = dshr(io.src1, _io_out_T_69) @[ALU.scala 86:34]
                                                          node _io_out_T_71 = bits(io.src2, 4, 0) @[ALU.scala 86:90]
                                                          node _io_out_T_72 = and(_io_out_T_71, UInt<5>("h1f")) @[ALU.scala 86:96]
                                                          node _io_out_T_73 = sub(UInt<6>("h20"), _io_out_T_72) @[ALU.scala 86:80]
                                                          node _io_out_T_74 = tail(_io_out_T_73, 1) @[ALU.scala 86:80]
                                                          node _io_out_T_75 = dshl(io.src1, _io_out_T_74) @[ALU.scala 86:71]
                                                          node _io_out_T_76 = or(_io_out_T_70, _io_out_T_75) @[ALU.scala 86:60]
                                                          io.out <= _io_out_T_76 @[ALU.scala 86:22]
                                                        else :
                                                          node _T_27 = eq(UInt<14>("h30f9"), io.ALUSel) @[ALU.scala 34:20]
                                                          when _T_27 : @[ALU.scala 34:20]
                                                            node _io_out_T_77 = bits(io.src2, 4, 0) @[ALU.scala 87:45]
                                                            node _io_out_T_78 = and(_io_out_T_77, UInt<5>("h1f")) @[ALU.scala 87:51]
                                                            node _io_out_T_79 = dshl(io.src1, _io_out_T_78) @[ALU.scala 87:34]
                                                            node _io_out_T_80 = bits(io.src2, 4, 0) @[ALU.scala 87:90]
                                                            node _io_out_T_81 = and(_io_out_T_80, UInt<5>("h1f")) @[ALU.scala 87:96]
                                                            node _io_out_T_82 = sub(UInt<6>("h20"), _io_out_T_81) @[ALU.scala 87:80]
                                                            node _io_out_T_83 = tail(_io_out_T_82, 1) @[ALU.scala 87:80]
                                                            node _io_out_T_84 = dshr(io.src1, _io_out_T_83) @[ALU.scala 87:71]
                                                            node _io_out_T_85 = or(_io_out_T_79, _io_out_T_84) @[ALU.scala 87:60]
                                                            io.out <= _io_out_T_85 @[ALU.scala 87:22]
                                                          else :
                                                            node _T_28 = eq(UInt<13>("h10fa"), io.ALUSel) @[ALU.scala 34:20]
                                                            when _T_28 : @[ALU.scala 34:20]
                                                              node _io_out_T_86 = dshl(io.src1, UInt<1>("h1")) @[ALU.scala 88:45]
                                                              node _io_out_T_87 = add(io.src2, _io_out_T_86) @[ALU.scala 88:34]
                                                              node _io_out_T_88 = tail(_io_out_T_87, 1) @[ALU.scala 88:34]
                                                              io.out <= _io_out_T_88 @[ALU.scala 88:23]
                                                            else :
                                                              node _T_29 = eq(UInt<13>("h10fc"), io.ALUSel) @[ALU.scala 34:20]
                                                              when _T_29 : @[ALU.scala 34:20]
                                                                node _io_out_T_89 = dshl(io.src1, UInt<2>("h2")) @[ALU.scala 89:45]
                                                                node _io_out_T_90 = add(io.src2, _io_out_T_89) @[ALU.scala 89:34]
                                                                node _io_out_T_91 = tail(_io_out_T_90, 1) @[ALU.scala 89:34]
                                                                io.out <= _io_out_T_91 @[ALU.scala 89:23]
                                                              else :
                                                                node _T_30 = eq(UInt<13>("h10fe"), io.ALUSel) @[ALU.scala 34:20]
                                                                when _T_30 : @[ALU.scala 34:20]
                                                                  node _io_out_T_92 = dshl(io.src1, UInt<2>("h3")) @[ALU.scala 90:45]
                                                                  node _io_out_T_93 = add(io.src2, _io_out_T_92) @[ALU.scala 90:34]
                                                                  node _io_out_T_94 = tail(_io_out_T_93, 1) @[ALU.scala 90:34]
                                                                  io.out <= _io_out_T_94 @[ALU.scala 90:23]
                                                                else :
                                                                  node _T_31 = eq(UInt<14>("h34c5"), io.ALUSel) @[ALU.scala 34:20]
                                                                  when _T_31 : @[ALU.scala 34:20]
                                                                    node _io_out_T_95 = bits(io.src1, 7, 0) @[ALU.scala 91:37]
                                                                    node _io_out_T_96 = bits(io.src1, 15, 8) @[ALU.scala 91:51]
                                                                    node _io_out_T_97 = bits(io.src1, 23, 16) @[ALU.scala 91:66]
                                                                    node _io_out_T_98 = bits(io.src1, 31, 24) @[ALU.scala 91:82]
                                                                    node io_out_lo_2 = cat(_io_out_T_97, _io_out_T_98) @[Cat.scala 33:92]
                                                                    node io_out_hi_2 = cat(_io_out_T_95, _io_out_T_96) @[Cat.scala 33:92]
                                                                    node _io_out_T_99 = cat(io_out_hi_2, io_out_lo_2) @[Cat.scala 33:92]
                                                                    io.out <= _io_out_T_99 @[ALU.scala 91:23]
                                                                  else :
                                                                    node _T_32 = eq(UInt<11>("h404"), io.ALUSel) @[ALU.scala 34:20]
                                                                    when _T_32 : @[ALU.scala 34:20]
                                                                      node _io_out_T_100 = and(io.src1, UInt<16>("hffff")) @[ALU.scala 92:34]
                                                                      io.out <= _io_out_T_100 @[ALU.scala 92:23]
                                                                    else :
                                                                      node _T_33 = eq(UInt<13>("h143d"), io.ALUSel) @[ALU.scala 34:20]
                                                                      when _T_33 : @[ALU.scala 34:20]
                                                                        node _io_out_T_101 = bits(io.src1, 31, 24) @[ALU.scala 94:20]
                                                                        node _io_out_T_102 = and(_io_out_T_101, UInt<8>("hff")) @[ALU.scala 94:29]
                                                                        node _io_out_T_103 = eq(_io_out_T_102, UInt<1>("h0")) @[ALU.scala 94:39]
                                                                        node _io_out_T_104 = mux(_io_out_T_103, UInt<1>("h0"), UInt<8>("hff")) @[ALU.scala 94:10]
                                                                        node _io_out_T_105 = bits(io.src1, 23, 16) @[ALU.scala 95:20]
                                                                        node _io_out_T_106 = and(_io_out_T_105, UInt<8>("hff")) @[ALU.scala 95:29]
                                                                        node _io_out_T_107 = eq(_io_out_T_106, UInt<1>("h0")) @[ALU.scala 95:39]
                                                                        node _io_out_T_108 = mux(_io_out_T_107, UInt<1>("h0"), UInt<8>("hff")) @[ALU.scala 95:10]
                                                                        node _io_out_T_109 = bits(io.src1, 15, 8) @[ALU.scala 96:20]
                                                                        node _io_out_T_110 = and(_io_out_T_109, UInt<8>("hff")) @[ALU.scala 96:28]
                                                                        node _io_out_T_111 = eq(_io_out_T_110, UInt<1>("h0")) @[ALU.scala 96:38]
                                                                        node _io_out_T_112 = mux(_io_out_T_111, UInt<1>("h0"), UInt<8>("hff")) @[ALU.scala 96:10]
                                                                        node _io_out_T_113 = bits(io.src1, 7, 0) @[ALU.scala 97:20]
                                                                        node _io_out_T_114 = and(_io_out_T_113, UInt<8>("hff")) @[ALU.scala 97:27]
                                                                        node _io_out_T_115 = eq(_io_out_T_114, UInt<1>("h0")) @[ALU.scala 97:37]
                                                                        node _io_out_T_116 = mux(_io_out_T_115, UInt<1>("h0"), UInt<8>("hff")) @[ALU.scala 97:10]
                                                                        node io_out_lo_3 = cat(_io_out_T_112, _io_out_T_116) @[Cat.scala 33:92]
                                                                        node io_out_hi_3 = cat(_io_out_T_104, _io_out_T_108) @[Cat.scala 33:92]
                                                                        node _io_out_T_117 = cat(io_out_hi_3, io_out_lo_3) @[Cat.scala 33:92]
                                                                        io.out <= _io_out_T_117 @[ALU.scala 93:23]
                                                                      else :
                                                                        node _T_34 = eq(UInt<9>("h1f8"), io.ALUSel) @[ALU.scala 34:20]
                                                                        when _T_34 : @[ALU.scala 34:20]
                                                                          node _io_out_T_118 = mul(io.src1, io.src2) @[ALU.scala 100:33]
                                                                          io.out <= _io_out_T_118 @[ALU.scala 100:22]

  module Path_EXE :
    input clock : Clock
    input reset : Reset
    output io : { flip EXE_pc_in : UInt<15>, flip EXE_imm_in : UInt<32>, flip EXE_rs1_rdata_in : UInt<32>, flip EXE_rs2_rdata_in : UInt<32>, flip E_ASel : UInt<2>, flip E_BSel : UInt<1>, flip E_BrUn : UInt<1>, flip E_ALUSel : UInt<15>, EXE_target_pc_out : UInt<15>, EXE_alu_out : UInt<32>, EXE_rs2_rdata_out : UInt<32>, E_BrEq : UInt<1>, E_BrLT : UInt<1>, alu_src1 : UInt<32>, alu_src2 : UInt<32>, EXE_src1 : UInt<32>, EXE_src2 : UInt<32>}

    wire alu_src1 : UInt<32> @[Path_EXE.scala 32:24]
    wire alu_src2 : UInt<32> @[Path_EXE.scala 33:24]
    inst bc of BranchComp @[Path_EXE.scala 36:20]
    bc.clock <= clock
    bc.reset <= reset
    bc.io.BrUn <= io.E_BrUn @[Path_EXE.scala 37:16]
    bc.io.src1 <= io.EXE_rs1_rdata_in @[Path_EXE.scala 38:16]
    bc.io.src2 <= io.EXE_rs2_rdata_in @[Path_EXE.scala 39:16]
    io.E_BrEq <= bc.io.BrEq @[Path_EXE.scala 40:15]
    io.E_BrLT <= bc.io.BrLT @[Path_EXE.scala 41:15]
    inst alu of ALU @[Path_EXE.scala 44:21]
    alu.clock <= clock
    alu.reset <= reset
    node _alu_src1_T = eq(UInt<1>("h0"), io.E_ASel) @[Mux.scala 81:61]
    node _alu_src1_T_1 = mux(_alu_src1_T, io.EXE_rs1_rdata_in, io.EXE_rs1_rdata_in) @[Mux.scala 81:58]
    node _alu_src1_T_2 = eq(UInt<1>("h1"), io.E_ASel) @[Mux.scala 81:61]
    node _alu_src1_T_3 = mux(_alu_src1_T_2, io.EXE_pc_in, _alu_src1_T_1) @[Mux.scala 81:58]
    node _alu_src1_T_4 = eq(UInt<2>("h2"), io.E_ASel) @[Mux.scala 81:61]
    node _alu_src1_T_5 = mux(_alu_src1_T_4, UInt<32>("h0"), _alu_src1_T_3) @[Mux.scala 81:58]
    alu_src1 <= _alu_src1_T_5 @[Path_EXE.scala 45:14]
    node _alu_src2_T = eq(UInt<1>("h1"), io.E_BSel) @[Mux.scala 81:61]
    node _alu_src2_T_1 = mux(_alu_src2_T, io.EXE_imm_in, io.EXE_rs2_rdata_in) @[Mux.scala 81:58]
    alu_src2 <= _alu_src2_T_1 @[Path_EXE.scala 50:14]
    alu.io.src1 <= alu_src1 @[Path_EXE.scala 54:17]
    alu.io.src2 <= alu_src2 @[Path_EXE.scala 55:17]
    alu.io.ALUSel <= io.E_ALUSel @[Path_EXE.scala 56:19]
    io.EXE_alu_out <= alu.io.out @[Path_EXE.scala 57:20]
    io.EXE_rs2_rdata_out <= io.EXE_rs2_rdata_in @[Path_EXE.scala 60:26]
    node _io_EXE_target_pc_out_T = bits(alu.io.out, 14, 0) @[Path_EXE.scala 61:39]
    io.EXE_target_pc_out <= _io_EXE_target_pc_out_T @[Path_EXE.scala 61:26]
    io.alu_src1 <= alu_src1 @[Path_EXE.scala 62:17]
    io.alu_src2 <= alu_src2 @[Path_EXE.scala 63:17]
    io.EXE_src1 <= io.EXE_rs1_rdata_in @[Path_EXE.scala 64:17]
    io.EXE_src2 <= io.EXE_rs2_rdata_in @[Path_EXE.scala 65:17]

  module Path_MEM :
    input clock : Clock
    input reset : Reset
    output io : { flip MEM_pc_in : UInt<15>, flip MEM_alu_out_in : UInt<32>, flip MEM_DM_wdata_in : UInt<32>, MEM_pc_plus_4 : UInt<15>, MEM_alu_out : UInt<32>, MEM_ld_data : UInt<32>, Mem_Addr : UInt<15>, Mem_Write_Data : UInt<32>, flip Mem_Data : UInt<32>}

    node _io_MEM_pc_plus_4_T = add(io.MEM_pc_in, UInt<15>("h4")) @[Path_MEM.scala 24:38]
    node _io_MEM_pc_plus_4_T_1 = tail(_io_MEM_pc_plus_4_T, 1) @[Path_MEM.scala 24:38]
    io.MEM_pc_plus_4 <= _io_MEM_pc_plus_4_T_1 @[Path_MEM.scala 24:22]
    node _io_Mem_Addr_T = bits(io.MEM_alu_out_in, 14, 0) @[Path_MEM.scala 27:37]
    io.Mem_Addr <= _io_Mem_Addr_T @[Path_MEM.scala 27:17]
    io.Mem_Write_Data <= io.MEM_DM_wdata_in @[Path_MEM.scala 28:23]
    io.MEM_ld_data <= io.Mem_Data @[Path_MEM.scala 29:20]
    io.MEM_alu_out <= io.MEM_alu_out_in @[Path_MEM.scala 32:20]

  module Path_WB :
    input clock : Clock
    input reset : Reset
    output io : { flip WB_pc_plus4_in : UInt<15>, flip WB_alu_out_in : UInt<32>, flip WB_ld_data_in : UInt<32>, flip W_WBSel : UInt<2>, WB_wdata : UInt<32>}

    node _io_WB_wdata_T = eq(UInt<1>("h0"), io.W_WBSel) @[Mux.scala 81:61]
    node _io_WB_wdata_T_1 = mux(_io_WB_wdata_T, io.WB_pc_plus4_in, UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_WB_wdata_T_2 = eq(UInt<1>("h1"), io.W_WBSel) @[Mux.scala 81:61]
    node _io_WB_wdata_T_3 = mux(_io_WB_wdata_T_2, io.WB_alu_out_in, _io_WB_wdata_T_1) @[Mux.scala 81:58]
    node _io_WB_wdata_T_4 = eq(UInt<2>("h2"), io.W_WBSel) @[Mux.scala 81:61]
    node _io_WB_wdata_T_5 = mux(_io_WB_wdata_T_4, io.WB_ld_data_in, _io_WB_wdata_T_3) @[Mux.scala 81:58]
    io.WB_wdata <= _io_WB_wdata_T_5 @[Path_WB.scala 19:17]

  module Controller :
    input clock : Clock
    input reset : Reset
    output io : { IM_Mem_R : UInt<1>, IM_Mem_W : UInt<1>, IM_Length : UInt<4>, flip IM_Valid : UInt<1>, DM_Mem_R : UInt<1>, DM_Mem_W : UInt<1>, DM_Length : UInt<4>, flip DM_Valid : UInt<1>, flip E_BrEq : UInt<1>, flip E_BrLT : UInt<1>, E_Branch_taken : UInt<1>, E_En : UInt<1>, flip ID_pc : UInt<15>, flip EXE_target_pc : UInt<15>, Flush_DH : UInt<1>, Flush_BH : UInt<1>, Stall_DH : UInt<1>, Stall_MA : UInt<1>, flip IF_Inst : UInt<32>, flip ID_Inst : UInt<32>, flip EXE_Inst : UInt<32>, flip MEM_Inst : UInt<32>, flip WB_Inst : UInt<32>, PCSel : UInt<2>, D_ImmSel : UInt<3>, W_RegWEn : UInt<1>, E_BrUn : UInt<1>, E_ASel : UInt<2>, E_BSel : UInt<1>, E_ALUSel : UInt<15>, W_WBSel : UInt<2>, Hcf : UInt<1>}

    node IF_opcode = bits(io.IF_Inst, 6, 0) @[Controller.scala 67:29]
    node ID_opcode = bits(io.ID_Inst, 6, 0) @[Controller.scala 69:29]
    node ID_rs1 = bits(io.ID_Inst, 19, 15) @[Controller.scala 70:26]
    node ID_rs2 = bits(io.ID_Inst, 24, 20) @[Controller.scala 71:26]
    node EXE_opcode = bits(io.EXE_Inst, 6, 0) @[Controller.scala 74:31]
    node EXE_funct3 = bits(io.EXE_Inst, 14, 12) @[Controller.scala 75:31]
    node EXE_funct7 = bits(io.EXE_Inst, 31, 25) @[Controller.scala 76:31]
    node EXE_rd = bits(io.EXE_Inst, 11, 7) @[Controller.scala 77:27]
    node EXE_rs1 = bits(io.EXE_Inst, 19, 15) @[Controller.scala 78:28]
    node EXE_rs2 = bits(io.EXE_Inst, 24, 20) @[Controller.scala 79:28]
    node MEM_opcode = bits(io.MEM_Inst, 6, 0) @[Controller.scala 81:31]
    node MEM_funct3 = bits(io.MEM_Inst, 14, 12) @[Controller.scala 82:31]
    node MEM_rd = bits(io.MEM_Inst, 11, 7) @[Controller.scala 83:27]
    node WB_opcode = bits(io.WB_Inst, 6, 0) @[Controller.scala 85:29]
    node WB_rd = bits(io.WB_Inst, 11, 7) @[Controller.scala 86:25]
    wire E_En : UInt<1> @[Controller.scala 89:18]
    node _E_En_T = eq(EXE_opcode, UInt<7>("h63")) @[Controller.scala 90:22]
    node _E_En_T_1 = eq(EXE_opcode, UInt<7>("h6f")) @[Controller.scala 90:45]
    node _E_En_T_2 = or(_E_En_T, _E_En_T_1) @[Controller.scala 90:32]
    node _E_En_T_3 = eq(EXE_opcode, UInt<7>("h67")) @[Controller.scala 90:65]
    node _E_En_T_4 = or(_E_En_T_2, _E_En_T_3) @[Controller.scala 90:52]
    E_En <= _E_En_T_4 @[Controller.scala 90:8]
    wire E_Branch_taken : UInt<1> @[Controller.scala 91:28]
    node _E_Branch_taken_T = eq(io.E_BrEq, UInt<1>("h0")) @[Controller.scala 95:20]
    node _E_Branch_taken_T_1 = eq(io.E_BrLT, UInt<1>("h0")) @[Controller.scala 97:20]
    node _E_Branch_taken_T_2 = eq(io.E_BrLT, UInt<1>("h0")) @[Controller.scala 99:20]
    node _E_Branch_taken_T_3 = eq(UInt<1>("h0"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_4 = mux(_E_Branch_taken_T_3, io.E_BrEq, UInt<1>("h0")) @[Mux.scala 81:58]
    node _E_Branch_taken_T_5 = eq(UInt<1>("h1"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_6 = mux(_E_Branch_taken_T_5, _E_Branch_taken_T, _E_Branch_taken_T_4) @[Mux.scala 81:58]
    node _E_Branch_taken_T_7 = eq(UInt<3>("h4"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_8 = mux(_E_Branch_taken_T_7, io.E_BrLT, _E_Branch_taken_T_6) @[Mux.scala 81:58]
    node _E_Branch_taken_T_9 = eq(UInt<3>("h5"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_10 = mux(_E_Branch_taken_T_9, _E_Branch_taken_T_1, _E_Branch_taken_T_8) @[Mux.scala 81:58]
    node _E_Branch_taken_T_11 = eq(UInt<3>("h6"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_12 = mux(_E_Branch_taken_T_11, io.E_BrLT, _E_Branch_taken_T_10) @[Mux.scala 81:58]
    node _E_Branch_taken_T_13 = eq(UInt<3>("h7"), EXE_funct3) @[Mux.scala 81:61]
    node _E_Branch_taken_T_14 = mux(_E_Branch_taken_T_13, _E_Branch_taken_T_2, _E_Branch_taken_T_12) @[Mux.scala 81:58]
    node _E_Branch_taken_T_15 = eq(UInt<7>("h63"), EXE_opcode) @[Mux.scala 81:61]
    node _E_Branch_taken_T_16 = mux(_E_Branch_taken_T_15, _E_Branch_taken_T_14, UInt<1>("h0")) @[Mux.scala 81:58]
    node _E_Branch_taken_T_17 = eq(UInt<7>("h6f"), EXE_opcode) @[Mux.scala 81:61]
    node _E_Branch_taken_T_18 = mux(_E_Branch_taken_T_17, UInt<1>("h1"), _E_Branch_taken_T_16) @[Mux.scala 81:58]
    node _E_Branch_taken_T_19 = eq(UInt<7>("h67"), EXE_opcode) @[Mux.scala 81:61]
    node _E_Branch_taken_T_20 = mux(_E_Branch_taken_T_19, UInt<1>("h1"), _E_Branch_taken_T_18) @[Mux.scala 81:58]
    E_Branch_taken <= _E_Branch_taken_T_20 @[Controller.scala 92:18]
    io.E_En <= E_En @[Controller.scala 105:11]
    io.E_Branch_taken <= E_Branch_taken @[Controller.scala 106:21]
    wire Predict_Miss : UInt<1> @[Controller.scala 109:26]
    node _Predict_Miss_T = and(E_En, E_Branch_taken) @[Controller.scala 110:25]
    node _Predict_Miss_T_1 = neq(io.ID_pc, io.EXE_target_pc) @[Controller.scala 110:54]
    node _Predict_Miss_T_2 = and(_Predict_Miss_T, _Predict_Miss_T_1) @[Controller.scala 110:43]
    Predict_Miss <= _Predict_Miss_T_2 @[Controller.scala 110:16]
    when Predict_Miss : @[Controller.scala 113:21]
      io.PCSel <= UInt<2>("h2") @[Controller.scala 114:14]
    else :
      io.PCSel <= UInt<1>("h0") @[Controller.scala 116:14]
    node _io_E_BrUn_T = bits(io.EXE_Inst, 13, 13) @[Controller.scala 120:28]
    node _io_E_BrUn_T_1 = eq(_io_E_BrUn_T, UInt<1>("h1")) @[Controller.scala 120:33]
    io.E_BrUn <= _io_E_BrUn_T_1 @[Controller.scala 120:13]
    node _io_D_ImmSel_T = eq(UInt<5>("h13"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_1 = mux(_io_D_ImmSel_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_2 = eq(UInt<7>("h67"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_3 = mux(_io_D_ImmSel_T_2, UInt<1>("h1"), _io_D_ImmSel_T_1) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_4 = eq(UInt<2>("h3"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_5 = mux(_io_D_ImmSel_T_4, UInt<1>("h1"), _io_D_ImmSel_T_3) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_6 = eq(UInt<7>("h63"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_7 = mux(_io_D_ImmSel_T_6, UInt<2>("h3"), _io_D_ImmSel_T_5) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_8 = eq(UInt<6>("h23"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_9 = mux(_io_D_ImmSel_T_8, UInt<2>("h2"), _io_D_ImmSel_T_7) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_10 = eq(UInt<6>("h37"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_11 = mux(_io_D_ImmSel_T_10, UInt<3>("h5"), _io_D_ImmSel_T_9) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_12 = eq(UInt<5>("h17"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_13 = mux(_io_D_ImmSel_T_12, UInt<3>("h5"), _io_D_ImmSel_T_11) @[Mux.scala 81:58]
    node _io_D_ImmSel_T_14 = eq(UInt<7>("h6f"), ID_opcode) @[Mux.scala 81:61]
    node _io_D_ImmSel_T_15 = mux(_io_D_ImmSel_T_14, UInt<3>("h4"), _io_D_ImmSel_T_13) @[Mux.scala 81:58]
    io.D_ImmSel <= _io_D_ImmSel_T_15 @[Controller.scala 123:15]
    node _io_E_ASel_T = eq(UInt<5>("h17"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ASel_T_1 = mux(_io_E_ASel_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_E_ASel_T_2 = eq(UInt<7>("h63"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ASel_T_3 = mux(_io_E_ASel_T_2, UInt<1>("h1"), _io_E_ASel_T_1) @[Mux.scala 81:58]
    node _io_E_ASel_T_4 = eq(UInt<7>("h6f"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ASel_T_5 = mux(_io_E_ASel_T_4, UInt<1>("h1"), _io_E_ASel_T_3) @[Mux.scala 81:58]
    node _io_E_ASel_T_6 = eq(UInt<6>("h37"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ASel_T_7 = mux(_io_E_ASel_T_6, UInt<2>("h2"), _io_E_ASel_T_5) @[Mux.scala 81:58]
    io.E_ASel <= _io_E_ASel_T_7 @[Controller.scala 137:13]
    node _io_E_BSel_T = eq(EXE_opcode, UInt<6>("h33")) @[Controller.scala 144:31]
    node _io_E_BSel_T_1 = mux(_io_E_BSel_T, UInt<1>("h0"), UInt<1>("h1")) @[Controller.scala 144:19]
    io.E_BSel <= _io_E_BSel_T_1 @[Controller.scala 144:13]
    wire EXE_funct5 : UInt<5> @[Controller.scala 147:24]
    node _EXE_funct5_T = cat(EXE_funct7, EXE_funct3) @[Cat.scala 33:92]
    node _EXE_funct5_T_1 = eq(UInt<9>("h181"), _EXE_funct5_T) @[Mux.scala 81:61]
    node _EXE_funct5_T_2 = mux(_EXE_funct5_T_1, EXE_rs2, UInt<5>("h1f")) @[Mux.scala 81:58]
    node _EXE_funct5_T_3 = eq(UInt<9>("h1a5"), _EXE_funct5_T) @[Mux.scala 81:61]
    node _EXE_funct5_T_4 = mux(_EXE_funct5_T_3, EXE_rs2, _EXE_funct5_T_2) @[Mux.scala 81:58]
    node _EXE_funct5_T_5 = eq(UInt<8>("ha5"), _EXE_funct5_T) @[Mux.scala 81:61]
    node _EXE_funct5_T_6 = mux(_EXE_funct5_T_5, EXE_rs2, _EXE_funct5_T_4) @[Mux.scala 81:58]
    EXE_funct5 <= _EXE_funct5_T_6 @[Controller.scala 148:14]
    wire use_funct7 : UInt<1> @[Controller.scala 154:24]
    node _use_funct7_T = eq(EXE_funct3, UInt<1>("h1")) @[Controller.scala 155:29]
    node _use_funct7_T_1 = eq(EXE_funct3, UInt<3>("h5")) @[Controller.scala 155:56]
    node _use_funct7_T_2 = or(_use_funct7_T, _use_funct7_T_1) @[Controller.scala 155:42]
    use_funct7 <= _use_funct7_T_2 @[Controller.scala 155:14]
    wire zext_check : UInt<1> @[Controller.scala 156:24]
    node _zext_check_T = eq(EXE_funct3, UInt<3>("h4")) @[Controller.scala 157:29]
    node _zext_check_T_1 = eq(EXE_funct7, UInt<3>("h4")) @[Controller.scala 157:56]
    node _zext_check_T_2 = and(_zext_check_T, _zext_check_T_1) @[Controller.scala 157:42]
    node _zext_check_T_3 = eq(EXE_rs2, UInt<1>("h0")) @[Controller.scala 157:84]
    node _zext_check_T_4 = and(_zext_check_T_2, _zext_check_T_3) @[Controller.scala 157:73]
    zext_check <= _zext_check_T_4 @[Controller.scala 157:14]
    node io_E_ALUSel_hi = cat(UInt<7>("h0"), UInt<5>("h1f")) @[Cat.scala 33:92]
    node _io_E_ALUSel_T = cat(io_E_ALUSel_hi, UInt<3>("h0")) @[Cat.scala 33:92]
    node _io_E_ALUSel_T_1 = mux(zext_check, EXE_rs2, UInt<5>("h1f")) @[Controller.scala 161:31]
    node io_E_ALUSel_hi_1 = cat(EXE_funct7, _io_E_ALUSel_T_1) @[Cat.scala 33:92]
    node _io_E_ALUSel_T_2 = cat(io_E_ALUSel_hi_1, EXE_funct3) @[Cat.scala 33:92]
    node io_E_ALUSel_hi_2 = cat(EXE_funct7, EXE_funct5) @[Cat.scala 33:92]
    node _io_E_ALUSel_T_3 = cat(io_E_ALUSel_hi_2, EXE_funct3) @[Cat.scala 33:92]
    node io_E_ALUSel_hi_3 = cat(UInt<7>("h0"), EXE_funct5) @[Cat.scala 33:92]
    node _io_E_ALUSel_T_4 = cat(io_E_ALUSel_hi_3, EXE_funct3) @[Cat.scala 33:92]
    node _io_E_ALUSel_T_5 = mux(use_funct7, _io_E_ALUSel_T_3, _io_E_ALUSel_T_4) @[Controller.scala 162:18]
    node _io_E_ALUSel_T_6 = eq(UInt<6>("h33"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ALUSel_T_7 = mux(_io_E_ALUSel_T_6, _io_E_ALUSel_T_2, _io_E_ALUSel_T) @[Mux.scala 81:58]
    node _io_E_ALUSel_T_8 = eq(UInt<5>("h13"), EXE_opcode) @[Mux.scala 81:61]
    node _io_E_ALUSel_T_9 = mux(_io_E_ALUSel_T_8, _io_E_ALUSel_T_5, _io_E_ALUSel_T_7) @[Mux.scala 81:58]
    io.E_ALUSel <= _io_E_ALUSel_T_9 @[Controller.scala 160:15]
    node _io_DM_Mem_R_T = eq(MEM_opcode, UInt<2>("h3")) @[Controller.scala 166:29]
    io.DM_Mem_R <= _io_DM_Mem_R_T @[Controller.scala 166:15]
    node _io_DM_Mem_W_T = eq(MEM_opcode, UInt<6>("h23")) @[Controller.scala 167:29]
    io.DM_Mem_W <= _io_DM_Mem_W_T @[Controller.scala 167:15]
    node _io_DM_Length_T = cat(UInt<1>("h0"), MEM_funct3) @[Cat.scala 33:92]
    io.DM_Length <= _io_DM_Length_T @[Controller.scala 168:16]
    io.IM_Mem_R <= UInt<1>("h1") @[Controller.scala 171:15]
    io.IM_Mem_W <= UInt<1>("h0") @[Controller.scala 172:15]
    io.IM_Length <= UInt<2>("h2") @[Controller.scala 173:16]
    node _io_W_RegWEn_T = eq(UInt<7>("h63"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_RegWEn_T_1 = mux(_io_W_RegWEn_T, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 81:58]
    node _io_W_RegWEn_T_2 = eq(UInt<6>("h23"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_RegWEn_T_3 = mux(_io_W_RegWEn_T_2, UInt<1>("h0"), _io_W_RegWEn_T_1) @[Mux.scala 81:58]
    node _io_W_RegWEn_T_4 = eq(UInt<4>("hb"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_RegWEn_T_5 = mux(_io_W_RegWEn_T_4, UInt<1>("h0"), _io_W_RegWEn_T_3) @[Mux.scala 81:58]
    io.W_RegWEn <= _io_W_RegWEn_T_5 @[Controller.scala 177:15]
    node _io_W_WBSel_T = eq(UInt<2>("h3"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_WBSel_T_1 = mux(_io_W_WBSel_T, UInt<2>("h2"), UInt<1>("h1")) @[Mux.scala 81:58]
    node _io_W_WBSel_T_2 = eq(UInt<7>("h6f"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_WBSel_T_3 = mux(_io_W_WBSel_T_2, UInt<1>("h0"), _io_W_WBSel_T_1) @[Mux.scala 81:58]
    node _io_W_WBSel_T_4 = eq(UInt<7>("h67"), WB_opcode) @[Mux.scala 81:61]
    node _io_W_WBSel_T_5 = mux(_io_W_WBSel_T_4, UInt<1>("h0"), _io_W_WBSel_T_3) @[Mux.scala 81:58]
    io.W_WBSel <= _io_W_WBSel_T_5 @[Controller.scala 184:14]
    node _io_Hcf_T = eq(IF_opcode, UInt<4>("hb")) @[Controller.scala 191:24]
    io.Hcf <= _io_Hcf_T @[Controller.scala 191:10]
    wire is_D_use_rs1 : UInt<1> @[Controller.scala 201:26]
    node _is_D_use_rs1_T = eq(UInt<7>("h6f"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs1_T_1 = mux(_is_D_use_rs1_T, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 81:58]
    node _is_D_use_rs1_T_2 = eq(UInt<6>("h37"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs1_T_3 = mux(_is_D_use_rs1_T_2, UInt<1>("h0"), _is_D_use_rs1_T_1) @[Mux.scala 81:58]
    node _is_D_use_rs1_T_4 = eq(UInt<5>("h17"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs1_T_5 = mux(_is_D_use_rs1_T_4, UInt<1>("h0"), _is_D_use_rs1_T_3) @[Mux.scala 81:58]
    node _is_D_use_rs1_T_6 = eq(UInt<4>("hb"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs1_T_7 = mux(_is_D_use_rs1_T_6, UInt<1>("h0"), _is_D_use_rs1_T_5) @[Mux.scala 81:58]
    is_D_use_rs1 <= _is_D_use_rs1_T_7 @[Controller.scala 202:16]
    wire is_D_use_rs2 : UInt<1> @[Controller.scala 210:26]
    node _is_D_use_rs2_T = eq(UInt<7>("h63"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs2_T_1 = mux(_is_D_use_rs2_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _is_D_use_rs2_T_2 = eq(UInt<6>("h33"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs2_T_3 = mux(_is_D_use_rs2_T_2, UInt<1>("h1"), _is_D_use_rs2_T_1) @[Mux.scala 81:58]
    node _is_D_use_rs2_T_4 = eq(UInt<6>("h23"), ID_opcode) @[Mux.scala 81:61]
    node _is_D_use_rs2_T_5 = mux(_is_D_use_rs2_T_4, UInt<1>("h1"), _is_D_use_rs2_T_3) @[Mux.scala 81:58]
    is_D_use_rs2 <= _is_D_use_rs2_T_5 @[Controller.scala 211:16]
    wire is_W_use_rd : UInt<1> @[Controller.scala 219:25]
    node _is_W_use_rd_T = eq(UInt<7>("h63"), WB_opcode) @[Mux.scala 81:61]
    node _is_W_use_rd_T_1 = mux(_is_W_use_rd_T, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 81:58]
    node _is_W_use_rd_T_2 = eq(UInt<6>("h23"), WB_opcode) @[Mux.scala 81:61]
    node _is_W_use_rd_T_3 = mux(_is_W_use_rd_T_2, UInt<1>("h0"), _is_W_use_rd_T_1) @[Mux.scala 81:58]
    node _is_W_use_rd_T_4 = eq(UInt<4>("hb"), WB_opcode) @[Mux.scala 81:61]
    node _is_W_use_rd_T_5 = mux(_is_W_use_rd_T_4, UInt<1>("h0"), _is_W_use_rd_T_3) @[Mux.scala 81:58]
    is_W_use_rd <= _is_W_use_rd_T_5 @[Controller.scala 220:15]
    wire is_M_use_rd : UInt<1> @[Controller.scala 228:25]
    node _is_M_use_rd_T = eq(UInt<7>("h63"), MEM_opcode) @[Mux.scala 81:61]
    node _is_M_use_rd_T_1 = mux(_is_M_use_rd_T, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 81:58]
    node _is_M_use_rd_T_2 = eq(UInt<6>("h23"), MEM_opcode) @[Mux.scala 81:61]
    node _is_M_use_rd_T_3 = mux(_is_M_use_rd_T_2, UInt<1>("h0"), _is_M_use_rd_T_1) @[Mux.scala 81:58]
    node _is_M_use_rd_T_4 = eq(UInt<4>("hb"), MEM_opcode) @[Mux.scala 81:61]
    node _is_M_use_rd_T_5 = mux(_is_M_use_rd_T_4, UInt<1>("h0"), _is_M_use_rd_T_3) @[Mux.scala 81:58]
    is_M_use_rd <= _is_M_use_rd_T_5 @[Controller.scala 229:15]
    wire is_E_use_rd : UInt<1> @[Controller.scala 237:25]
    node _is_E_use_rd_T = eq(UInt<7>("h63"), EXE_opcode) @[Mux.scala 81:61]
    node _is_E_use_rd_T_1 = mux(_is_E_use_rd_T, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 81:58]
    node _is_E_use_rd_T_2 = eq(UInt<6>("h23"), EXE_opcode) @[Mux.scala 81:61]
    node _is_E_use_rd_T_3 = mux(_is_E_use_rd_T_2, UInt<1>("h0"), _is_E_use_rd_T_1) @[Mux.scala 81:58]
    node _is_E_use_rd_T_4 = eq(UInt<4>("hb"), EXE_opcode) @[Mux.scala 81:61]
    node _is_E_use_rd_T_5 = mux(_is_E_use_rd_T_4, UInt<1>("h0"), _is_E_use_rd_T_3) @[Mux.scala 81:58]
    is_E_use_rd <= _is_E_use_rd_T_5 @[Controller.scala 238:15]
    node memory_access = eq(MEM_opcode, UInt<2>("h3")) @[Controller.scala 243:35]
    wire is_D_rs1_W_rd_overlap : UInt<1> @[Controller.scala 245:35]
    wire is_D_rs2_W_rd_overlap : UInt<1> @[Controller.scala 246:35]
    node _is_D_rs1_W_rd_overlap_T = and(is_D_use_rs1, is_W_use_rd) @[Controller.scala 247:41]
    node _is_D_rs1_W_rd_overlap_T_1 = eq(ID_rs1, WB_rd) @[Controller.scala 247:67]
    node _is_D_rs1_W_rd_overlap_T_2 = and(_is_D_rs1_W_rd_overlap_T, _is_D_rs1_W_rd_overlap_T_1) @[Controller.scala 247:56]
    node _is_D_rs1_W_rd_overlap_T_3 = neq(WB_rd, UInt<5>("h0")) @[Controller.scala 247:88]
    node _is_D_rs1_W_rd_overlap_T_4 = and(_is_D_rs1_W_rd_overlap_T_2, _is_D_rs1_W_rd_overlap_T_3) @[Controller.scala 247:78]
    is_D_rs1_W_rd_overlap <= _is_D_rs1_W_rd_overlap_T_4 @[Controller.scala 247:25]
    node _is_D_rs2_W_rd_overlap_T = and(is_D_use_rs2, is_W_use_rd) @[Controller.scala 248:41]
    node _is_D_rs2_W_rd_overlap_T_1 = eq(ID_rs2, WB_rd) @[Controller.scala 248:67]
    node _is_D_rs2_W_rd_overlap_T_2 = and(_is_D_rs2_W_rd_overlap_T, _is_D_rs2_W_rd_overlap_T_1) @[Controller.scala 248:56]
    node _is_D_rs2_W_rd_overlap_T_3 = neq(WB_rd, UInt<5>("h0")) @[Controller.scala 248:88]
    node _is_D_rs2_W_rd_overlap_T_4 = and(_is_D_rs2_W_rd_overlap_T_2, _is_D_rs2_W_rd_overlap_T_3) @[Controller.scala 248:78]
    is_D_rs2_W_rd_overlap <= _is_D_rs2_W_rd_overlap_T_4 @[Controller.scala 248:25]
    wire is_D_rs1_M_rd_overlap : UInt<1> @[Controller.scala 250:35]
    wire is_D_rs2_M_rd_overlap : UInt<1> @[Controller.scala 251:35]
    node _is_D_rs1_M_rd_overlap_T = and(is_D_use_rs1, is_M_use_rd) @[Controller.scala 252:41]
    node _is_D_rs1_M_rd_overlap_T_1 = eq(ID_rs1, MEM_rd) @[Controller.scala 252:67]
    node _is_D_rs1_M_rd_overlap_T_2 = and(_is_D_rs1_M_rd_overlap_T, _is_D_rs1_M_rd_overlap_T_1) @[Controller.scala 252:56]
    node _is_D_rs1_M_rd_overlap_T_3 = neq(MEM_rd, UInt<5>("h0")) @[Controller.scala 252:90]
    node _is_D_rs1_M_rd_overlap_T_4 = and(_is_D_rs1_M_rd_overlap_T_2, _is_D_rs1_M_rd_overlap_T_3) @[Controller.scala 252:79]
    is_D_rs1_M_rd_overlap <= _is_D_rs1_M_rd_overlap_T_4 @[Controller.scala 252:25]
    node _is_D_rs2_M_rd_overlap_T = and(is_D_use_rs2, is_M_use_rd) @[Controller.scala 253:41]
    node _is_D_rs2_M_rd_overlap_T_1 = eq(ID_rs2, MEM_rd) @[Controller.scala 253:67]
    node _is_D_rs2_M_rd_overlap_T_2 = and(_is_D_rs2_M_rd_overlap_T, _is_D_rs2_M_rd_overlap_T_1) @[Controller.scala 253:56]
    node _is_D_rs2_M_rd_overlap_T_3 = neq(MEM_rd, UInt<5>("h0")) @[Controller.scala 253:90]
    node _is_D_rs2_M_rd_overlap_T_4 = and(_is_D_rs2_M_rd_overlap_T_2, _is_D_rs2_M_rd_overlap_T_3) @[Controller.scala 253:79]
    is_D_rs2_M_rd_overlap <= _is_D_rs2_M_rd_overlap_T_4 @[Controller.scala 253:25]
    wire is_D_rs1_E_rd_overlap : UInt<1> @[Controller.scala 255:35]
    wire is_D_rs2_E_rd_overlap : UInt<1> @[Controller.scala 256:35]
    node _is_D_rs1_E_rd_overlap_T = and(is_D_use_rs1, is_E_use_rd) @[Controller.scala 257:41]
    node _is_D_rs1_E_rd_overlap_T_1 = eq(ID_rs1, EXE_rd) @[Controller.scala 257:67]
    node _is_D_rs1_E_rd_overlap_T_2 = and(_is_D_rs1_E_rd_overlap_T, _is_D_rs1_E_rd_overlap_T_1) @[Controller.scala 257:56]
    node _is_D_rs1_E_rd_overlap_T_3 = neq(EXE_rd, UInt<5>("h0")) @[Controller.scala 257:90]
    node _is_D_rs1_E_rd_overlap_T_4 = and(_is_D_rs1_E_rd_overlap_T_2, _is_D_rs1_E_rd_overlap_T_3) @[Controller.scala 257:79]
    is_D_rs1_E_rd_overlap <= _is_D_rs1_E_rd_overlap_T_4 @[Controller.scala 257:25]
    node _is_D_rs2_E_rd_overlap_T = and(is_D_use_rs2, is_E_use_rd) @[Controller.scala 258:41]
    node _is_D_rs2_E_rd_overlap_T_1 = eq(ID_rs2, EXE_rd) @[Controller.scala 258:67]
    node _is_D_rs2_E_rd_overlap_T_2 = and(_is_D_rs2_E_rd_overlap_T, _is_D_rs2_E_rd_overlap_T_1) @[Controller.scala 258:56]
    node _is_D_rs2_E_rd_overlap_T_3 = neq(EXE_rd, UInt<5>("h0")) @[Controller.scala 258:90]
    node _is_D_rs2_E_rd_overlap_T_4 = and(_is_D_rs2_E_rd_overlap_T_2, _is_D_rs2_E_rd_overlap_T_3) @[Controller.scala 258:79]
    is_D_rs2_E_rd_overlap <= _is_D_rs2_E_rd_overlap_T_4 @[Controller.scala 258:25]
    node _io_Stall_DH_T = or(is_D_rs1_W_rd_overlap, is_D_rs2_W_rd_overlap) @[Controller.scala 262:41]
    node _io_Stall_DH_T_1 = or(is_D_rs1_E_rd_overlap, is_D_rs2_E_rd_overlap) @[Controller.scala 263:41]
    node _io_Stall_DH_T_2 = or(_io_Stall_DH_T, _io_Stall_DH_T_1) @[Controller.scala 262:67]
    node _io_Stall_DH_T_3 = or(is_D_rs1_M_rd_overlap, is_D_rs2_M_rd_overlap) @[Controller.scala 264:41]
    node _io_Stall_DH_T_4 = or(_io_Stall_DH_T_2, _io_Stall_DH_T_3) @[Controller.scala 263:67]
    io.Stall_DH <= _io_Stall_DH_T_4 @[Controller.scala 262:15]
    wire DM_to_read : UInt<1> @[Controller.scala 266:24]
    wire DM_to_write : UInt<1> @[Controller.scala 267:25]
    node _DM_to_read_T = eq(MEM_opcode, UInt<2>("h3")) @[Controller.scala 268:29]
    DM_to_read <= _DM_to_read_T @[Controller.scala 268:14]
    node _DM_to_write_T = eq(MEM_opcode, UInt<6>("h23")) @[Controller.scala 269:30]
    DM_to_write <= _DM_to_write_T @[Controller.scala 269:15]
    wire DM_done : UInt<1> @[Controller.scala 270:21]
    node _DM_done_T = not(DM_to_read) @[Controller.scala 271:15]
    node _DM_done_T_1 = not(DM_to_write) @[Controller.scala 271:30]
    node _DM_done_T_2 = and(_DM_done_T, _DM_done_T_1) @[Controller.scala 271:27]
    DM_done <= _DM_done_T_2 @[Controller.scala 271:11]
    node _io_Stall_MA_T = or(DM_to_read, DM_to_write) @[Controller.scala 273:29]
    io.Stall_MA <= _io_Stall_MA_T @[Controller.scala 273:15]
    io.Flush_BH <= Predict_Miss @[Controller.scala 275:15]
    node _io_Flush_DH_T = or(is_D_rs1_W_rd_overlap, is_D_rs2_W_rd_overlap) @[Controller.scala 276:41]
    node _io_Flush_DH_T_1 = or(is_D_rs1_E_rd_overlap, is_D_rs2_E_rd_overlap) @[Controller.scala 277:41]
    node _io_Flush_DH_T_2 = or(_io_Flush_DH_T, _io_Flush_DH_T_1) @[Controller.scala 276:67]
    node _io_Flush_DH_T_3 = or(is_D_rs1_M_rd_overlap, is_D_rs2_M_rd_overlap) @[Controller.scala 278:41]
    node _io_Flush_DH_T_4 = or(_io_Flush_DH_T_2, _io_Flush_DH_T_3) @[Controller.scala 277:67]
    io.Flush_DH <= _io_Flush_DH_T_4 @[Controller.scala 276:15]

  module PiplinedCPU :
    input clock : Clock
    input reset : Reset
    output io : { InstMem : { Mem_R : UInt<1>, Mem_W : UInt<1>, Length : UInt<4>, flip Valid : UInt<1>, raddr : UInt<15>, flip rdata : UInt<32>, waddr : UInt<15>, wdata : UInt<32>}, DataMem : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, regs : UInt<32>[32], Hcf : UInt<1>, E_Branch_taken : UInt<1>, Flush : UInt<1>, Stall_MA : UInt<1>, Stall_DH : UInt<1>, IF_PC : UInt<15>, ID_PC : UInt<15>, EXE_PC : UInt<15>, MEM_PC : UInt<15>, WB_PC : UInt<15>, EXE_src1 : UInt<32>, EXE_src2 : UInt<32>, ALU_src1 : UInt<32>, ALU_src2 : UInt<32>, raddr : UInt<15>, EXE_alu_out : UInt<32>, WB_rd : UInt<5>, WB_wdata : UInt<32>, EXE_Jump : UInt<1>, EXE_Branch : UInt<1>}

    inst stage_IF of Reg_IF @[PiplinedCPU.scala 49:26]
    stage_IF.clock <= clock
    stage_IF.reset <= reset
    inst stage_ID of Reg_ID @[PiplinedCPU.scala 50:26]
    stage_ID.clock <= clock
    stage_ID.reset <= reset
    inst stage_EXE of Reg_EXE @[PiplinedCPU.scala 51:27]
    stage_EXE.clock <= clock
    stage_EXE.reset <= reset
    inst stage_MEM of Reg_MEM @[PiplinedCPU.scala 52:27]
    stage_MEM.clock <= clock
    stage_MEM.reset <= reset
    inst stage_WB of Reg_WB @[PiplinedCPU.scala 53:26]
    stage_WB.clock <= clock
    stage_WB.reset <= reset
    inst datapath_IF of Path_IF @[PiplinedCPU.scala 56:29]
    datapath_IF.clock <= clock
    datapath_IF.reset <= reset
    inst datapath_ID of Path_ID @[PiplinedCPU.scala 57:29]
    datapath_ID.clock <= clock
    datapath_ID.reset <= reset
    inst datapath_EXE of Path_EXE @[PiplinedCPU.scala 58:30]
    datapath_EXE.clock <= clock
    datapath_EXE.reset <= reset
    inst datapath_MEM of Path_MEM @[PiplinedCPU.scala 59:30]
    datapath_MEM.clock <= clock
    datapath_MEM.reset <= reset
    inst datapath_WB of Path_WB @[PiplinedCPU.scala 60:29]
    datapath_WB.clock <= clock
    datapath_WB.reset <= reset
    inst contorller of Controller @[PiplinedCPU.scala 63:28]
    contorller.clock <= clock
    contorller.reset <= reset
    node _stage_IF_io_Stall_T = or(contorller.io.Hcf, contorller.io.Stall_DH) @[PiplinedCPU.scala 67:44]
    node _stage_IF_io_Stall_T_1 = or(_stage_IF_io_Stall_T, contorller.io.Stall_MA) @[PiplinedCPU.scala 67:69]
    stage_IF.io.Stall <= _stage_IF_io_Stall_T_1 @[PiplinedCPU.scala 67:23]
    stage_IF.io.next_pc_in <= datapath_IF.io.next_pc @[PiplinedCPU.scala 68:28]
    datapath_IF.io.PCSel <= contorller.io.PCSel @[PiplinedCPU.scala 71:26]
    datapath_IF.io.IF_pc_in <= stage_IF.io.pc @[PiplinedCPU.scala 72:29]
    datapath_IF.io.EXE_pc_in <= stage_EXE.io.pc @[PiplinedCPU.scala 73:30]
    datapath_IF.io.EXE_target_pc_in <= datapath_EXE.io.EXE_target_pc_out @[PiplinedCPU.scala 74:37]
    node _datapath_IF_io_Mem_data_T = bits(io.InstMem.rdata, 31, 0) @[PiplinedCPU.scala 75:48]
    datapath_IF.io.Mem_data <= _datapath_IF_io_Mem_data_T @[PiplinedCPU.scala 75:29]
    io.InstMem.Mem_R <= contorller.io.IM_Mem_R @[PiplinedCPU.scala 78:22]
    io.InstMem.Mem_W <= contorller.io.IM_Mem_W @[PiplinedCPU.scala 79:22]
    io.InstMem.Length <= contorller.io.IM_Length @[PiplinedCPU.scala 80:23]
    io.InstMem.raddr <= datapath_IF.io.Mem_Addr @[PiplinedCPU.scala 81:22]
    io.InstMem.waddr <= UInt<1>("h0") @[PiplinedCPU.scala 82:22]
    io.InstMem.wdata <= UInt<1>("h0") @[PiplinedCPU.scala 83:22]
    stage_ID.io.Flush <= contorller.io.Flush_BH @[PiplinedCPU.scala 86:23]
    node _stage_ID_io_Stall_T = or(contorller.io.Hcf, contorller.io.Stall_DH) @[PiplinedCPU.scala 87:44]
    node _stage_ID_io_Stall_T_1 = or(_stage_ID_io_Stall_T, contorller.io.Stall_MA) @[PiplinedCPU.scala 87:69]
    stage_ID.io.Stall <= _stage_ID_io_Stall_T_1 @[PiplinedCPU.scala 87:23]
    stage_ID.io.inst_in <= datapath_IF.io.inst @[PiplinedCPU.scala 88:25]
    stage_ID.io.pc_in <= stage_IF.io.pc @[PiplinedCPU.scala 89:23]
    datapath_ID.io.ID_inst_in <= stage_ID.io.inst @[PiplinedCPU.scala 92:31]
    node _datapath_ID_io_WB_index_T = bits(stage_WB.io.inst, 11, 7) @[PiplinedCPU.scala 93:48]
    datapath_ID.io.WB_index <= _datapath_ID_io_WB_index_T @[PiplinedCPU.scala 93:29]
    datapath_ID.io.WB_wdata <= datapath_WB.io.WB_wdata @[PiplinedCPU.scala 94:29]
    datapath_ID.io.WB_RegWEn <= contorller.io.W_RegWEn @[PiplinedCPU.scala 95:30]
    datapath_ID.io.ImmSel <= contorller.io.D_ImmSel @[PiplinedCPU.scala 96:27]
    node _stage_EXE_io_Flush_T = or(contorller.io.Flush_BH, contorller.io.Flush_DH) @[PiplinedCPU.scala 100:50]
    stage_EXE.io.Flush <= _stage_EXE_io_Flush_T @[PiplinedCPU.scala 100:24]
    node _stage_EXE_io_Stall_T = or(contorller.io.Hcf, contorller.io.Stall_MA) @[PiplinedCPU.scala 101:46]
    stage_EXE.io.Stall <= _stage_EXE_io_Stall_T @[PiplinedCPU.scala 101:24]
    stage_EXE.io.pc_in <= stage_ID.io.pc @[PiplinedCPU.scala 102:24]
    stage_EXE.io.inst_in <= stage_ID.io.inst @[PiplinedCPU.scala 103:26]
    stage_EXE.io.imm_in <= datapath_ID.io.imm @[PiplinedCPU.scala 104:25]
    stage_EXE.io.rs1_rdata_in <= datapath_ID.io.ID_rs1_rdata @[PiplinedCPU.scala 105:31]
    stage_EXE.io.rs2_rdata_in <= datapath_ID.io.ID_rs2_rdata @[PiplinedCPU.scala 106:31]
    datapath_EXE.io.EXE_pc_in <= stage_EXE.io.pc @[PiplinedCPU.scala 109:31]
    datapath_EXE.io.EXE_imm_in <= stage_EXE.io.imm @[PiplinedCPU.scala 110:32]
    datapath_EXE.io.EXE_rs1_rdata_in <= stage_EXE.io.rs1_rdata @[PiplinedCPU.scala 111:38]
    datapath_EXE.io.EXE_rs2_rdata_in <= stage_EXE.io.rs2_rdata @[PiplinedCPU.scala 112:38]
    datapath_EXE.io.E_ASel <= contorller.io.E_ASel @[PiplinedCPU.scala 113:28]
    datapath_EXE.io.E_BSel <= contorller.io.E_BSel @[PiplinedCPU.scala 114:28]
    datapath_EXE.io.E_BrUn <= contorller.io.E_BrUn @[PiplinedCPU.scala 115:28]
    datapath_EXE.io.E_ALUSel <= contorller.io.E_ALUSel @[PiplinedCPU.scala 116:30]
    node _stage_MEM_io_Stall_T = or(contorller.io.Hcf, contorller.io.Stall_MA) @[PiplinedCPU.scala 119:46]
    stage_MEM.io.Stall <= _stage_MEM_io_Stall_T @[PiplinedCPU.scala 119:24]
    stage_MEM.io.pc_in <= stage_EXE.io.pc @[PiplinedCPU.scala 120:24]
    stage_MEM.io.inst_in <= stage_EXE.io.inst @[PiplinedCPU.scala 121:26]
    stage_MEM.io.DM_wdata_in <= datapath_EXE.io.EXE_rs2_rdata_out @[PiplinedCPU.scala 122:30]
    stage_MEM.io.alu_out_in <= datapath_EXE.io.EXE_alu_out @[PiplinedCPU.scala 123:29]
    datapath_MEM.io.MEM_pc_in <= stage_MEM.io.pc @[PiplinedCPU.scala 126:31]
    datapath_MEM.io.MEM_alu_out_in <= stage_MEM.io.alu_out @[PiplinedCPU.scala 127:36]
    datapath_MEM.io.MEM_DM_wdata_in <= stage_MEM.io.DM_wdata @[PiplinedCPU.scala 128:37]
    node _datapath_MEM_io_Mem_Data_T = bits(io.DataMem.r.bits.data, 31, 0) @[PiplinedCPU.scala 130:55]
    datapath_MEM.io.Mem_Data <= _datapath_MEM_io_Mem_Data_T @[PiplinedCPU.scala 130:30]
    reg mReadState : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[PiplinedCPU.scala 136:30]
    reg mWriteState : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[PiplinedCPU.scala 137:30]
    node _T = eq(UInt<2>("h0"), mReadState) @[PiplinedCPU.scala 139:24]
    when _T : @[PiplinedCPU.scala 139:24]
      node _T_1 = eq(contorller.io.DM_Mem_R, UInt<1>("h1")) @[PiplinedCPU.scala 141:41]
      when _T_1 : @[PiplinedCPU.scala 141:50]
        mReadState <= UInt<2>("h1") @[PiplinedCPU.scala 142:28]
    else :
      node _T_2 = eq(UInt<2>("h1"), mReadState) @[PiplinedCPU.scala 139:24]
      when _T_2 : @[PiplinedCPU.scala 139:24]
        when io.DataMem.ar.ready : @[PiplinedCPU.scala 146:39]
          mReadState <= UInt<2>("h2") @[PiplinedCPU.scala 147:28]
      else :
        node _T_3 = eq(UInt<2>("h2"), mReadState) @[PiplinedCPU.scala 139:24]
        when _T_3 : @[PiplinedCPU.scala 139:24]
          when io.DataMem.r.valid : @[PiplinedCPU.scala 151:38]
            mReadState <= mReadState @[PiplinedCPU.scala 152:28]
    node _T_4 = eq(UInt<2>("h0"), mWriteState) @[PiplinedCPU.scala 156:25]
    when _T_4 : @[PiplinedCPU.scala 156:25]
      node _T_5 = eq(contorller.io.DM_Mem_W, UInt<1>("h1")) @[PiplinedCPU.scala 158:41]
      when _T_5 : @[PiplinedCPU.scala 158:50]
        mWriteState <= UInt<2>("h1") @[PiplinedCPU.scala 159:29]
    else :
      node _T_6 = eq(UInt<2>("h1"), mWriteState) @[PiplinedCPU.scala 156:25]
      when _T_6 : @[PiplinedCPU.scala 156:25]
        when io.DataMem.aw.ready : @[PiplinedCPU.scala 163:39]
          mWriteState <= UInt<2>("h2") @[PiplinedCPU.scala 164:29]
      else :
        node _T_7 = eq(UInt<2>("h2"), mWriteState) @[PiplinedCPU.scala 156:25]
        when _T_7 : @[PiplinedCPU.scala 156:25]
          when io.DataMem.w.ready : @[PiplinedCPU.scala 168:38]
            mWriteState <= UInt<2>("h3") @[PiplinedCPU.scala 169:29]
        else :
          node _T_8 = eq(UInt<2>("h3"), mWriteState) @[PiplinedCPU.scala 156:25]
          when _T_8 : @[PiplinedCPU.scala 156:25]
            when io.DataMem.b.valid : @[PiplinedCPU.scala 173:38]
              mWriteState <= UInt<2>("h0") @[PiplinedCPU.scala 174:29]
    node _io_DataMem_ar_valid_T = eq(mReadState, UInt<2>("h1")) @[PiplinedCPU.scala 180:45]
    io.DataMem.ar.valid <= _io_DataMem_ar_valid_T @[PiplinedCPU.scala 180:31]
    io.DataMem.ar.bits.addr <= UInt<1>("h0") @[PiplinedCPU.scala 181:31]
    io.DataMem.ar.bits.burst <= UInt<1>("h0") @[PiplinedCPU.scala 182:31]
    io.DataMem.ar.bits.len <= UInt<1>("h0") @[PiplinedCPU.scala 183:31]
    io.DataMem.ar.bits.size <= UInt<2>("h2") @[PiplinedCPU.scala 184:31]
    io.DataMem.ar.bits.cache <= UInt<1>("h0") @[PiplinedCPU.scala 185:31]
    io.DataMem.ar.bits.id <= UInt<1>("h0") @[PiplinedCPU.scala 186:31]
    io.DataMem.ar.bits.prot <= UInt<1>("h0") @[PiplinedCPU.scala 187:31]
    io.DataMem.ar.bits.lock <= UInt<1>("h0") @[PiplinedCPU.scala 188:31]
    io.DataMem.ar.bits.qos <= UInt<1>("h0") @[PiplinedCPU.scala 189:31]
    io.DataMem.ar.bits.region <= UInt<1>("h0") @[PiplinedCPU.scala 190:31]
    node _io_DataMem_r_ready_T = eq(mReadState, UInt<2>("h2")) @[PiplinedCPU.scala 192:38]
    io.DataMem.r.ready <= _io_DataMem_r_ready_T @[PiplinedCPU.scala 192:24]
    node _io_DataMem_aw_valid_T = eq(mWriteState, UInt<2>("h1")) @[PiplinedCPU.scala 195:46]
    io.DataMem.aw.valid <= _io_DataMem_aw_valid_T @[PiplinedCPU.scala 195:31]
    io.DataMem.aw.bits.addr <= UInt<1>("h0") @[PiplinedCPU.scala 196:31]
    io.DataMem.aw.bits.burst <= UInt<1>("h0") @[PiplinedCPU.scala 197:31]
    io.DataMem.aw.bits.len <= UInt<1>("h0") @[PiplinedCPU.scala 198:31]
    io.DataMem.aw.bits.size <= UInt<2>("h2") @[PiplinedCPU.scala 199:31]
    io.DataMem.aw.bits.cache <= UInt<1>("h0") @[PiplinedCPU.scala 200:31]
    io.DataMem.aw.bits.id <= UInt<1>("h0") @[PiplinedCPU.scala 201:31]
    io.DataMem.aw.bits.prot <= UInt<1>("h0") @[PiplinedCPU.scala 202:31]
    io.DataMem.aw.bits.lock <= UInt<1>("h0") @[PiplinedCPU.scala 203:31]
    io.DataMem.aw.bits.qos <= UInt<1>("h0") @[PiplinedCPU.scala 204:31]
    io.DataMem.aw.bits.region <= UInt<1>("h0") @[PiplinedCPU.scala 205:31]
    node _io_DataMem_w_valid_T = eq(mWriteState, UInt<2>("h2")) @[PiplinedCPU.scala 207:43]
    io.DataMem.w.valid <= _io_DataMem_w_valid_T @[PiplinedCPU.scala 207:28]
    io.DataMem.w.bits.data <= datapath_MEM.io.Mem_Write_Data @[PiplinedCPU.scala 208:28]
    io.DataMem.w.bits.strb <= UInt<4>("hf") @[PiplinedCPU.scala 209:28]
    io.DataMem.w.bits.last <= UInt<1>("h1") @[PiplinedCPU.scala 210:28]
    node _io_DataMem_b_ready_T = eq(mWriteState, UInt<2>("h3")) @[PiplinedCPU.scala 212:40]
    node _io_DataMem_b_ready_T_1 = eq(mWriteState, UInt<2>("h2")) @[PiplinedCPU.scala 212:70]
    node _io_DataMem_b_ready_T_2 = or(_io_DataMem_b_ready_T, _io_DataMem_b_ready_T_1) @[PiplinedCPU.scala 212:55]
    io.DataMem.b.ready <= _io_DataMem_b_ready_T_2 @[PiplinedCPU.scala 212:24]
    stage_WB.io.Stall <= contorller.io.Hcf @[PiplinedCPU.scala 223:23]
    stage_WB.io.pc_plus4_in <= datapath_MEM.io.MEM_pc_plus_4 @[PiplinedCPU.scala 224:29]
    stage_WB.io.inst_in <= stage_MEM.io.inst @[PiplinedCPU.scala 225:25]
    stage_WB.io.alu_out_in <= datapath_MEM.io.MEM_alu_out @[PiplinedCPU.scala 226:28]
    stage_WB.io.ld_data_in <= datapath_MEM.io.MEM_ld_data @[PiplinedCPU.scala 227:28]
    datapath_WB.io.WB_pc_plus4_in <= stage_WB.io.pc_plus4 @[PiplinedCPU.scala 230:35]
    datapath_WB.io.WB_alu_out_in <= stage_WB.io.alu_out @[PiplinedCPU.scala 231:34]
    datapath_WB.io.WB_ld_data_in <= stage_WB.io.ld_data @[PiplinedCPU.scala 232:34]
    datapath_WB.io.W_WBSel <= contorller.io.W_WBSel @[PiplinedCPU.scala 233:28]
    contorller.io.IF_Inst <= io.InstMem.rdata @[PiplinedCPU.scala 236:27]
    contorller.io.ID_Inst <= stage_ID.io.inst @[PiplinedCPU.scala 237:27]
    contorller.io.EXE_Inst <= stage_EXE.io.inst @[PiplinedCPU.scala 238:28]
    contorller.io.MEM_Inst <= stage_MEM.io.inst @[PiplinedCPU.scala 239:28]
    contorller.io.WB_Inst <= stage_WB.io.inst @[PiplinedCPU.scala 240:27]
    contorller.io.E_BrEq <= datapath_EXE.io.E_BrEq @[PiplinedCPU.scala 242:26]
    contorller.io.E_BrLT <= datapath_EXE.io.E_BrLT @[PiplinedCPU.scala 243:26]
    contorller.io.ID_pc <= stage_ID.io.pc @[PiplinedCPU.scala 245:25]
    contorller.io.EXE_target_pc <= datapath_EXE.io.EXE_target_pc_out @[PiplinedCPU.scala 247:33]
    contorller.io.IM_Valid <= io.InstMem.Valid @[PiplinedCPU.scala 249:28]
    node _contorller_io_DM_Valid_T = or(io.DataMem.r.valid, io.DataMem.w.ready) @[PiplinedCPU.scala 250:50]
    contorller.io.DM_Valid <= _contorller_io_DM_Valid_T @[PiplinedCPU.scala 250:28]
    io.regs <= datapath_ID.io.regs @[PiplinedCPU.scala 254:13]
    io.Hcf <= contorller.io.Hcf @[PiplinedCPU.scala 255:12]
    io.E_Branch_taken <= contorller.io.E_Branch_taken @[PiplinedCPU.scala 258:23]
    io.Flush <= contorller.io.Flush_DH @[PiplinedCPU.scala 260:14]
    io.Stall_DH <= contorller.io.Stall_DH @[PiplinedCPU.scala 262:17]
    io.Stall_MA <= contorller.io.Stall_MA @[PiplinedCPU.scala 263:17]
    io.IF_PC <= stage_IF.io.pc @[PiplinedCPU.scala 264:14]
    io.ID_PC <= stage_ID.io.pc @[PiplinedCPU.scala 265:14]
    io.EXE_PC <= stage_EXE.io.pc @[PiplinedCPU.scala 266:15]
    io.MEM_PC <= stage_MEM.io.pc @[PiplinedCPU.scala 267:15]
    node _io_WB_PC_T = gt(stage_WB.io.pc_plus4, UInt<1>("h0")) @[PiplinedCPU.scala 268:42]
    node _io_WB_PC_T_1 = sub(stage_WB.io.pc_plus4, UInt<3>("h4")) @[PiplinedCPU.scala 268:70]
    node _io_WB_PC_T_2 = tail(_io_WB_PC_T_1, 1) @[PiplinedCPU.scala 268:70]
    node _io_WB_PC_T_3 = mux(_io_WB_PC_T, _io_WB_PC_T_2, stage_WB.io.pc_plus4) @[PiplinedCPU.scala 268:20]
    io.WB_PC <= _io_WB_PC_T_3 @[PiplinedCPU.scala 268:14]
    io.EXE_alu_out <= datapath_EXE.io.EXE_alu_out @[PiplinedCPU.scala 269:20]
    io.EXE_src1 <= datapath_EXE.io.EXE_src1 @[PiplinedCPU.scala 270:17]
    io.EXE_src2 <= datapath_EXE.io.EXE_src2 @[PiplinedCPU.scala 271:17]
    io.ALU_src1 <= datapath_EXE.io.alu_src1 @[PiplinedCPU.scala 272:17]
    io.ALU_src2 <= datapath_EXE.io.alu_src2 @[PiplinedCPU.scala 273:17]
    io.raddr <= datapath_MEM.io.Mem_Addr @[PiplinedCPU.scala 274:14]
    io.WB_wdata <= datapath_WB.io.WB_wdata @[PiplinedCPU.scala 275:17]
    node _io_WB_rd_T = bits(stage_WB.io.inst, 11, 7) @[PiplinedCPU.scala 276:33]
    io.WB_rd <= _io_WB_rd_T @[PiplinedCPU.scala 276:14]
    node _io_EXE_Jump_T = bits(stage_EXE.io.inst, 6, 0) @[PiplinedCPU.scala 277:38]
    node _io_EXE_Jump_T_1 = eq(_io_EXE_Jump_T, UInt<7>("h6f")) @[PiplinedCPU.scala 277:44]
    node _io_EXE_Jump_T_2 = bits(stage_EXE.io.inst, 6, 0) @[PiplinedCPU.scala 277:73]
    node _io_EXE_Jump_T_3 = eq(_io_EXE_Jump_T_2, UInt<7>("h67")) @[PiplinedCPU.scala 277:79]
    node _io_EXE_Jump_T_4 = or(_io_EXE_Jump_T_1, _io_EXE_Jump_T_3) @[PiplinedCPU.scala 277:52]
    io.EXE_Jump <= _io_EXE_Jump_T_4 @[PiplinedCPU.scala 277:17]
    node _io_EXE_Branch_T = bits(stage_EXE.io.inst, 6, 0) @[PiplinedCPU.scala 278:40]
    node _io_EXE_Branch_T_1 = eq(_io_EXE_Branch_T, UInt<7>("h63")) @[PiplinedCPU.scala 278:46]
    io.EXE_Branch <= _io_EXE_Branch_T_1 @[PiplinedCPU.scala 278:19]

  module InstMem :
    input clock : Clock
    input reset : Reset
    output io : { flip raddr : UInt<15>, inst : UInt<32>}

    cmem memory : UInt<8> [32768] @[InstMem.scala 14:19]
    wire rdata : UInt<32> @[InstMem.scala 17:19]
    node _rdata_T = add(io.raddr, UInt<2>("h3")) @[InstMem.scala 18:32]
    node _rdata_T_1 = tail(_rdata_T, 1) @[InstMem.scala 18:32]
    infer mport rdata_MPORT = memory[_rdata_T_1], clock @[InstMem.scala 18:22]
    node _rdata_T_2 = add(io.raddr, UInt<2>("h2")) @[InstMem.scala 19:31]
    node _rdata_T_3 = tail(_rdata_T_2, 1) @[InstMem.scala 19:31]
    infer mport rdata_MPORT_1 = memory[_rdata_T_3], clock @[InstMem.scala 19:21]
    node _rdata_T_4 = add(io.raddr, UInt<1>("h1")) @[InstMem.scala 20:31]
    node _rdata_T_5 = tail(_rdata_T_4, 1) @[InstMem.scala 20:31]
    infer mport rdata_MPORT_2 = memory[_rdata_T_5], clock @[InstMem.scala 20:21]
    node _rdata_T_6 = add(io.raddr, UInt<1>("h0")) @[InstMem.scala 21:31]
    node _rdata_T_7 = tail(_rdata_T_6, 1) @[InstMem.scala 21:31]
    infer mport rdata_MPORT_3 = memory[_rdata_T_7], clock @[InstMem.scala 21:21]
    node rdata_lo = cat(rdata_MPORT_2, rdata_MPORT_3) @[Cat.scala 33:92]
    node rdata_hi = cat(rdata_MPORT, rdata_MPORT_1) @[Cat.scala 33:92]
    node _rdata_T_8 = cat(rdata_hi, rdata_lo) @[Cat.scala 33:92]
    rdata <= _rdata_T_8 @[InstMem.scala 18:9]
    io.inst <= rdata @[InstMem.scala 23:11]

  module DataMem :
    input clock : Clock
    input reset : Reset
    output io : { slave : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, flip dump : UInt<1>}

    cmem memory : UInt<32> [32] @[DataMem.scala 23:19]
    io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 27:21]
    io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 30:20]
    io.slave.b.bits.id <= UInt<1>("h0") @[DataMem.scala 33:22]
    io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 34:24]
    io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 35:20]
    io.slave.ar.ready <= UInt<1>("h0") @[DataMem.scala 38:21]
    io.slave.r.bits.id <= UInt<1>("h0") @[DataMem.scala 41:22]
    io.slave.r.bits.data <= UInt<1>("h0") @[DataMem.scala 42:24]
    io.slave.r.bits.resp <= UInt<1>("h0") @[DataMem.scala 43:24]
    io.slave.r.bits.last <= UInt<1>("h0") @[DataMem.scala 44:24]
    io.slave.r.valid <= UInt<1>("h0") @[DataMem.scala 45:20]
    reg readID : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 47:23]
    reg rAddrOffset : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[DataMem.scala 48:28]
    node _wAddrOffset_T = sub(io.slave.aw.bits.addr, UInt<1>("h0")) @[DataMem.scala 50:29]
    node _wAddrOffset_T_1 = tail(_wAddrOffset_T, 1) @[DataMem.scala 50:29]
    node _wAddrOffset_T_2 = not(UInt<32>("h3")) @[DataMem.scala 50:45]
    node _wAddrOffset_T_3 = and(_wAddrOffset_T_1, _wAddrOffset_T_2) @[DataMem.scala 50:43]
    node _wAddrOffset_T_4 = dshr(_wAddrOffset_T_3, UInt<2>("h2")) @[DataMem.scala 50:62]
    wire wAddrOffset : UInt
    wAddrOffset <= _wAddrOffset_T_4
    reg writeAddressReg : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[DataMem.scala 52:32]
    reg writeID : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 53:24]
    reg writeState : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[DataMem.scala 56:27]
    reg readState : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DataMem.scala 57:26]
    reg rLatencyCounter : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[DataMem.scala 58:32]
    reg wLatencyCounter : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[DataMem.scala 59:32]
    node _T = eq(UInt<2>("h0"), readState) @[DataMem.scala 61:21]
    when _T : @[DataMem.scala 61:21]
      node _T_1 = and(io.slave.ar.ready, io.slave.ar.valid) @[Decoupled.scala 52:35]
      when _T_1 : @[DataMem.scala 63:30]
        node _T_2 = eq(UInt<1>("h1"), UInt<1>("h1")) @[DataMem.scala 64:24]
        when _T_2 : @[DataMem.scala 64:33]
          readState <= UInt<2>("h2") @[DataMem.scala 65:21]
        else :
          readState <= UInt<2>("h1") @[DataMem.scala 68:21]
    else :
      node _T_3 = eq(UInt<2>("h1"), readState) @[DataMem.scala 61:21]
      when _T_3 : @[DataMem.scala 61:21]
        node _T_4 = eq(rLatencyCounter, UInt<1>("h0")) @[DataMem.scala 73:28]
        when _T_4 : @[DataMem.scala 73:49]
          readState <= UInt<2>("h2") @[DataMem.scala 74:19]
      else :
        node _T_5 = eq(UInt<2>("h2"), readState) @[DataMem.scala 61:21]
        when _T_5 : @[DataMem.scala 61:21]
          node _T_6 = and(io.slave.r.ready, io.slave.r.valid) @[Decoupled.scala 52:35]
          when _T_6 : @[DataMem.scala 78:29]
            readState <= UInt<2>("h0") @[DataMem.scala 79:19]
    node _T_7 = eq(readState, UInt<2>("h0")) @[DataMem.scala 84:18]
    when _T_7 : @[DataMem.scala 84:29]
      io.slave.ar.ready <= UInt<1>("h1") @[DataMem.scala 85:23]
      io.slave.r.valid <= UInt<1>("h0") @[DataMem.scala 86:22]
      node _rAddrOffset_T = sub(io.slave.ar.bits.addr, UInt<1>("h0")) @[DataMem.scala 87:44]
      node _rAddrOffset_T_1 = tail(_rAddrOffset_T, 1) @[DataMem.scala 87:44]
      node _rAddrOffset_T_2 = not(UInt<32>("h3")) @[DataMem.scala 87:60]
      node _rAddrOffset_T_3 = and(_rAddrOffset_T_1, _rAddrOffset_T_2) @[DataMem.scala 87:58]
      node _rAddrOffset_T_4 = dshr(_rAddrOffset_T_3, UInt<2>("h2")) @[DataMem.scala 87:77]
      rAddrOffset <= _rAddrOffset_T_4 @[DataMem.scala 87:17]
      readID <= io.slave.ar.bits.id @[DataMem.scala 88:12]
    else :
      node _T_8 = eq(readState, UInt<2>("h1")) @[DataMem.scala 90:23]
      when _T_8 : @[DataMem.scala 90:38]
        node _rLatencyCounter_T = add(rLatencyCounter, UInt<1>("h1")) @[DataMem.scala 91:40]
        node _rLatencyCounter_T_1 = tail(_rLatencyCounter_T, 1) @[DataMem.scala 91:40]
        rLatencyCounter <= _rLatencyCounter_T_1 @[DataMem.scala 91:21]
      else :
        node _T_9 = eq(readState, UInt<2>("h2")) @[DataMem.scala 93:23]
        when _T_9 : @[DataMem.scala 93:34]
          rLatencyCounter <= UInt<1>("h0") @[DataMem.scala 94:21]
          io.slave.ar.ready <= UInt<1>("h0") @[DataMem.scala 95:23]
          io.slave.r.valid <= UInt<1>("h1") @[DataMem.scala 96:22]
          node _io_slave_r_bits_data_T = bits(rAddrOffset, 4, 0) @[DataMem.scala 97:35]
          infer mport io_slave_r_bits_data_MPORT = memory[_io_slave_r_bits_data_T], clock @[DataMem.scala 97:35]
          io.slave.r.bits.data <= io_slave_r_bits_data_MPORT @[DataMem.scala 97:26]
          io.slave.r.bits.id <= readID @[DataMem.scala 98:24]
          io.slave.r.bits.resp <= UInt<1>("h0") @[DataMem.scala 99:26]
          io.slave.r.bits.last <= UInt<1>("h1") @[DataMem.scala 100:26]
    node _T_10 = eq(UInt<3>("h0"), writeState) @[DataMem.scala 103:22]
    when _T_10 : @[DataMem.scala 103:22]
      writeState <= UInt<3>("h1") @[DataMem.scala 105:18]
    else :
      node _T_11 = eq(UInt<3>("h1"), writeState) @[DataMem.scala 103:22]
      when _T_11 : @[DataMem.scala 103:22]
        node _T_12 = and(io.slave.aw.valid, io.slave.w.valid) @[DataMem.scala 108:30]
        when _T_12 : @[DataMem.scala 108:51]
          node _T_13 = eq(UInt<1>("h1"), UInt<1>("h1")) @[DataMem.scala 109:24]
          when _T_13 : @[DataMem.scala 109:33]
            writeState <= UInt<3>("h3") @[DataMem.scala 110:22]
          else :
            writeState <= UInt<3>("h2") @[DataMem.scala 112:22]
        else :
          when io.slave.aw.valid : @[DataMem.scala 115:36]
            writeState <= UInt<3>("h4") @[DataMem.scala 116:20]
      else :
        node _T_14 = eq(UInt<3>("h4"), writeState) @[DataMem.scala 103:22]
        when _T_14 : @[DataMem.scala 103:22]
          when io.slave.w.valid : @[DataMem.scala 120:30]
            node _T_15 = eq(UInt<1>("h1"), UInt<1>("h1")) @[DataMem.scala 121:24]
            when _T_15 : @[DataMem.scala 121:33]
              writeState <= UInt<3>("h3") @[DataMem.scala 122:22]
            else :
              writeState <= UInt<3>("h2") @[DataMem.scala 124:22]
        else :
          node _T_16 = eq(UInt<3>("h2"), writeState) @[DataMem.scala 103:22]
          when _T_16 : @[DataMem.scala 103:22]
            node _T_17 = eq(wLatencyCounter, UInt<1>("h0")) @[DataMem.scala 129:28]
            when _T_17 : @[DataMem.scala 129:48]
              writeState <= UInt<3>("h3") @[DataMem.scala 130:20]
          else :
            node _T_18 = eq(UInt<3>("h3"), writeState) @[DataMem.scala 103:22]
            when _T_18 : @[DataMem.scala 103:22]
              when io.slave.b.ready : @[DataMem.scala 134:30]
                writeState <= UInt<3>("h1") @[DataMem.scala 135:20]
    wire _writeData_WIRE : UInt<8>[4] @[DataMem.scala 140:38]
    _writeData_WIRE[0] <= UInt<8>("h0") @[DataMem.scala 140:38]
    _writeData_WIRE[1] <= UInt<8>("h0") @[DataMem.scala 140:38]
    _writeData_WIRE[2] <= UInt<8>("h0") @[DataMem.scala 140:38]
    _writeData_WIRE[3] <= UInt<8>("h0") @[DataMem.scala 140:38]
    wire writeData : UInt<8>[4]
    writeData <= _writeData_WIRE
    node _T_19 = bits(io.slave.w.bits.strb, 0, 0) @[DataMem.scala 142:30]
    node _T_20 = eq(_T_19, UInt<1>("h1")) @[DataMem.scala 142:34]
    when _T_20 : @[DataMem.scala 142:43]
      node _writeData_0_T = bits(io.slave.w.bits.data, 7, 0) @[DataMem.scala 143:43]
      writeData[0] <= _writeData_0_T @[DataMem.scala 143:20]
    else :
      writeData[0] <= UInt<1>("h0") @[DataMem.scala 145:20]
    node _T_21 = bits(io.slave.w.bits.strb, 1, 1) @[DataMem.scala 142:30]
    node _T_22 = eq(_T_21, UInt<1>("h1")) @[DataMem.scala 142:34]
    when _T_22 : @[DataMem.scala 142:43]
      node _writeData_1_T = bits(io.slave.w.bits.data, 15, 8) @[DataMem.scala 143:43]
      writeData[1] <= _writeData_1_T @[DataMem.scala 143:20]
    else :
      writeData[1] <= UInt<1>("h0") @[DataMem.scala 145:20]
    node _T_23 = bits(io.slave.w.bits.strb, 2, 2) @[DataMem.scala 142:30]
    node _T_24 = eq(_T_23, UInt<1>("h1")) @[DataMem.scala 142:34]
    when _T_24 : @[DataMem.scala 142:43]
      node _writeData_2_T = bits(io.slave.w.bits.data, 23, 16) @[DataMem.scala 143:43]
      writeData[2] <= _writeData_2_T @[DataMem.scala 143:20]
    else :
      writeData[2] <= UInt<1>("h0") @[DataMem.scala 145:20]
    node _T_25 = bits(io.slave.w.bits.strb, 3, 3) @[DataMem.scala 142:30]
    node _T_26 = eq(_T_25, UInt<1>("h1")) @[DataMem.scala 142:34]
    when _T_26 : @[DataMem.scala 142:43]
      node _writeData_3_T = bits(io.slave.w.bits.data, 31, 24) @[DataMem.scala 143:43]
      writeData[3] <= _writeData_3_T @[DataMem.scala 143:20]
    else :
      writeData[3] <= UInt<1>("h0") @[DataMem.scala 145:20]
    node _T_27 = eq(writeState, UInt<3>("h0")) @[DataMem.scala 149:19]
    when _T_27 : @[DataMem.scala 149:30]
      io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 150:23]
      io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 151:22]
      io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 152:26]
      io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 153:22]
    else :
      node _T_28 = eq(writeState, UInt<3>("h1")) @[DataMem.scala 155:24]
      when _T_28 : @[DataMem.scala 155:36]
        io.slave.aw.ready <= UInt<1>("h1") @[DataMem.scala 156:23]
        io.slave.w.ready <= UInt<1>("h1") @[DataMem.scala 157:22]
        node _T_29 = and(io.slave.aw.valid, io.slave.w.valid) @[DataMem.scala 158:28]
        when _T_29 : @[DataMem.scala 158:49]
          node _T_30 = or(wAddrOffset, UInt<5>("h0")) @[DataMem.scala 159:13]
          node _T_31 = bits(_T_30, 4, 0) @[DataMem.scala 159:13]
          infer mport MPORT = memory[_T_31], clock @[DataMem.scala 159:13]
          node lo = cat(writeData[1], writeData[0]) @[DataMem.scala 159:46]
          node hi = cat(writeData[3], writeData[2]) @[DataMem.scala 159:46]
          node _T_32 = cat(hi, lo) @[DataMem.scala 159:46]
          MPORT <= _T_32 @[DataMem.scala 159:27]
          writeAddressReg <= wAddrOffset @[DataMem.scala 160:23]
          writeID <= io.slave.aw.bits.id @[DataMem.scala 161:15]
        else :
          when io.slave.aw.valid : @[DataMem.scala 163:34]
            writeAddressReg <= wAddrOffset @[DataMem.scala 164:23]
            writeID <= io.slave.aw.bits.id @[DataMem.scala 165:15]
        io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 167:26]
        io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 168:22]
      else :
        node _T_33 = eq(writeState, UInt<3>("h4")) @[DataMem.scala 171:24]
        when _T_33 : @[DataMem.scala 171:39]
          io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 172:23]
          io.slave.w.ready <= UInt<1>("h1") @[DataMem.scala 173:22]
          io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 174:26]
          io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 175:22]
          when io.slave.w.valid : @[DataMem.scala 176:28]
            node _T_34 = bits(writeAddressReg, 4, 0) @[DataMem.scala 177:13]
            infer mport MPORT_1 = memory[_T_34], clock @[DataMem.scala 177:13]
            node lo_1 = cat(writeData[1], writeData[0]) @[DataMem.scala 177:50]
            node hi_1 = cat(writeData[3], writeData[2]) @[DataMem.scala 177:50]
            node _T_35 = cat(hi_1, lo_1) @[DataMem.scala 177:50]
            MPORT_1 <= _T_35 @[DataMem.scala 177:31]
        else :
          node _T_36 = eq(writeState, UInt<3>("h2")) @[DataMem.scala 180:24]
          when _T_36 : @[DataMem.scala 180:39]
            node _wLatencyCounter_T = add(wLatencyCounter, UInt<1>("h1")) @[DataMem.scala 181:40]
            node _wLatencyCounter_T_1 = tail(_wLatencyCounter_T, 1) @[DataMem.scala 181:40]
            wLatencyCounter <= _wLatencyCounter_T_1 @[DataMem.scala 181:21]
          else :
            node _T_37 = eq(writeState, UInt<3>("h3")) @[DataMem.scala 183:24]
            when _T_37 : @[DataMem.scala 183:37]
              wLatencyCounter <= UInt<1>("h0") @[DataMem.scala 184:21]
              io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 185:23]
              io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 186:22]
              io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 187:26]
              io.slave.b.bits.id <= writeID @[DataMem.scala 188:24]
              io.slave.b.valid <= UInt<1>("h1") @[DataMem.scala 189:22]
    when io.dump : @[DataMem.scala 192:17]
      node _T_38 = asUInt(reset) @[DataMem.scala 194:11]
      node _T_39 = eq(_T_38, UInt<1>("h0")) @[DataMem.scala 194:11]
      when _T_39 : @[DataMem.scala 194:11]
        printf(clock, UInt<1>("h1"), "\t\t======== Data Memory Dump ========\n") : printf @[DataMem.scala 194:11]
      node _T_40 = asUInt(reset) @[DataMem.scala 195:11]
      node _T_41 = eq(_T_40, UInt<1>("h0")) @[DataMem.scala 195:11]
      when _T_41 : @[DataMem.scala 195:11]
        printf(clock, UInt<1>("h1"), "\t\tFrom base address 0\n") : printf_1 @[DataMem.scala 195:11]
      infer mport data_MPORT = memory[UInt<1>("h0")], clock @[DataMem.scala 198:24]
      node data = asSInt(data_MPORT) @[DataMem.scala 198:30]
      node _T_42 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_43 = eq(_T_42, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_43 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[0] (address = 0) = 0x%x (%d)\n", data, data) : printf_2 @[DataMem.scala 199:13]
      infer mport data_MPORT_1 = memory[UInt<1>("h1")], clock @[DataMem.scala 198:24]
      node data_1 = asSInt(data_MPORT_1) @[DataMem.scala 198:30]
      node _T_44 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_45 = eq(_T_44, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_45 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[1] (address = 4) = 0x%x (%d)\n", data_1, data_1) : printf_3 @[DataMem.scala 199:13]
      infer mport data_MPORT_2 = memory[UInt<2>("h2")], clock @[DataMem.scala 198:24]
      node data_2 = asSInt(data_MPORT_2) @[DataMem.scala 198:30]
      node _T_46 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_47 = eq(_T_46, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_47 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[2] (address = 8) = 0x%x (%d)\n", data_2, data_2) : printf_4 @[DataMem.scala 199:13]
      infer mport data_MPORT_3 = memory[UInt<2>("h3")], clock @[DataMem.scala 198:24]
      node data_3 = asSInt(data_MPORT_3) @[DataMem.scala 198:30]
      node _T_48 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_49 = eq(_T_48, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_49 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[3] (address = 12) = 0x%x (%d)\n", data_3, data_3) : printf_5 @[DataMem.scala 199:13]
      infer mport data_MPORT_4 = memory[UInt<3>("h4")], clock @[DataMem.scala 198:24]
      node data_4 = asSInt(data_MPORT_4) @[DataMem.scala 198:30]
      node _T_50 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_51 = eq(_T_50, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_51 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[4] (address = 16) = 0x%x (%d)\n", data_4, data_4) : printf_6 @[DataMem.scala 199:13]
      infer mport data_MPORT_5 = memory[UInt<3>("h5")], clock @[DataMem.scala 198:24]
      node data_5 = asSInt(data_MPORT_5) @[DataMem.scala 198:30]
      node _T_52 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_53 = eq(_T_52, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_53 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[5] (address = 20) = 0x%x (%d)\n", data_5, data_5) : printf_7 @[DataMem.scala 199:13]
      infer mport data_MPORT_6 = memory[UInt<3>("h6")], clock @[DataMem.scala 198:24]
      node data_6 = asSInt(data_MPORT_6) @[DataMem.scala 198:30]
      node _T_54 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_55 = eq(_T_54, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_55 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[6] (address = 24) = 0x%x (%d)\n", data_6, data_6) : printf_8 @[DataMem.scala 199:13]
      infer mport data_MPORT_7 = memory[UInt<3>("h7")], clock @[DataMem.scala 198:24]
      node data_7 = asSInt(data_MPORT_7) @[DataMem.scala 198:30]
      node _T_56 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_57 = eq(_T_56, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_57 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[7] (address = 28) = 0x%x (%d)\n", data_7, data_7) : printf_9 @[DataMem.scala 199:13]
      infer mport data_MPORT_8 = memory[UInt<4>("h8")], clock @[DataMem.scala 198:24]
      node data_8 = asSInt(data_MPORT_8) @[DataMem.scala 198:30]
      node _T_58 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_59 = eq(_T_58, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_59 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[8] (address = 32) = 0x%x (%d)\n", data_8, data_8) : printf_10 @[DataMem.scala 199:13]
      infer mport data_MPORT_9 = memory[UInt<4>("h9")], clock @[DataMem.scala 198:24]
      node data_9 = asSInt(data_MPORT_9) @[DataMem.scala 198:30]
      node _T_60 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_61 = eq(_T_60, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_61 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[9] (address = 36) = 0x%x (%d)\n", data_9, data_9) : printf_11 @[DataMem.scala 199:13]
      infer mport data_MPORT_10 = memory[UInt<4>("ha")], clock @[DataMem.scala 198:24]
      node data_10 = asSInt(data_MPORT_10) @[DataMem.scala 198:30]
      node _T_62 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_63 = eq(_T_62, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_63 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[10] (address = 40) = 0x%x (%d)\n", data_10, data_10) : printf_12 @[DataMem.scala 199:13]
      infer mport data_MPORT_11 = memory[UInt<4>("hb")], clock @[DataMem.scala 198:24]
      node data_11 = asSInt(data_MPORT_11) @[DataMem.scala 198:30]
      node _T_64 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_65 = eq(_T_64, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_65 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[11] (address = 44) = 0x%x (%d)\n", data_11, data_11) : printf_13 @[DataMem.scala 199:13]
      infer mport data_MPORT_12 = memory[UInt<4>("hc")], clock @[DataMem.scala 198:24]
      node data_12 = asSInt(data_MPORT_12) @[DataMem.scala 198:30]
      node _T_66 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_67 = eq(_T_66, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_67 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[12] (address = 48) = 0x%x (%d)\n", data_12, data_12) : printf_14 @[DataMem.scala 199:13]
      infer mport data_MPORT_13 = memory[UInt<4>("hd")], clock @[DataMem.scala 198:24]
      node data_13 = asSInt(data_MPORT_13) @[DataMem.scala 198:30]
      node _T_68 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_69 = eq(_T_68, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_69 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[13] (address = 52) = 0x%x (%d)\n", data_13, data_13) : printf_15 @[DataMem.scala 199:13]
      infer mport data_MPORT_14 = memory[UInt<4>("he")], clock @[DataMem.scala 198:24]
      node data_14 = asSInt(data_MPORT_14) @[DataMem.scala 198:30]
      node _T_70 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_71 = eq(_T_70, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_71 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[14] (address = 56) = 0x%x (%d)\n", data_14, data_14) : printf_16 @[DataMem.scala 199:13]
      infer mport data_MPORT_15 = memory[UInt<4>("hf")], clock @[DataMem.scala 198:24]
      node data_15 = asSInt(data_MPORT_15) @[DataMem.scala 198:30]
      node _T_72 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_73 = eq(_T_72, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_73 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[15] (address = 60) = 0x%x (%d)\n", data_15, data_15) : printf_17 @[DataMem.scala 199:13]
      infer mport data_MPORT_16 = memory[UInt<5>("h10")], clock @[DataMem.scala 198:24]
      node data_16 = asSInt(data_MPORT_16) @[DataMem.scala 198:30]
      node _T_74 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_75 = eq(_T_74, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_75 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[16] (address = 64) = 0x%x (%d)\n", data_16, data_16) : printf_18 @[DataMem.scala 199:13]
      infer mport data_MPORT_17 = memory[UInt<5>("h11")], clock @[DataMem.scala 198:24]
      node data_17 = asSInt(data_MPORT_17) @[DataMem.scala 198:30]
      node _T_76 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_77 = eq(_T_76, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_77 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[17] (address = 68) = 0x%x (%d)\n", data_17, data_17) : printf_19 @[DataMem.scala 199:13]
      infer mport data_MPORT_18 = memory[UInt<5>("h12")], clock @[DataMem.scala 198:24]
      node data_18 = asSInt(data_MPORT_18) @[DataMem.scala 198:30]
      node _T_78 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_79 = eq(_T_78, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_79 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[18] (address = 72) = 0x%x (%d)\n", data_18, data_18) : printf_20 @[DataMem.scala 199:13]
      infer mport data_MPORT_19 = memory[UInt<5>("h13")], clock @[DataMem.scala 198:24]
      node data_19 = asSInt(data_MPORT_19) @[DataMem.scala 198:30]
      node _T_80 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_81 = eq(_T_80, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_81 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[19] (address = 76) = 0x%x (%d)\n", data_19, data_19) : printf_21 @[DataMem.scala 199:13]
      infer mport data_MPORT_20 = memory[UInt<5>("h14")], clock @[DataMem.scala 198:24]
      node data_20 = asSInt(data_MPORT_20) @[DataMem.scala 198:30]
      node _T_82 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_83 = eq(_T_82, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_83 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[20] (address = 80) = 0x%x (%d)\n", data_20, data_20) : printf_22 @[DataMem.scala 199:13]
      infer mport data_MPORT_21 = memory[UInt<5>("h15")], clock @[DataMem.scala 198:24]
      node data_21 = asSInt(data_MPORT_21) @[DataMem.scala 198:30]
      node _T_84 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_85 = eq(_T_84, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_85 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[21] (address = 84) = 0x%x (%d)\n", data_21, data_21) : printf_23 @[DataMem.scala 199:13]
      infer mport data_MPORT_22 = memory[UInt<5>("h16")], clock @[DataMem.scala 198:24]
      node data_22 = asSInt(data_MPORT_22) @[DataMem.scala 198:30]
      node _T_86 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_87 = eq(_T_86, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_87 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[22] (address = 88) = 0x%x (%d)\n", data_22, data_22) : printf_24 @[DataMem.scala 199:13]
      infer mport data_MPORT_23 = memory[UInt<5>("h17")], clock @[DataMem.scala 198:24]
      node data_23 = asSInt(data_MPORT_23) @[DataMem.scala 198:30]
      node _T_88 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_89 = eq(_T_88, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_89 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[23] (address = 92) = 0x%x (%d)\n", data_23, data_23) : printf_25 @[DataMem.scala 199:13]
      infer mport data_MPORT_24 = memory[UInt<5>("h18")], clock @[DataMem.scala 198:24]
      node data_24 = asSInt(data_MPORT_24) @[DataMem.scala 198:30]
      node _T_90 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_91 = eq(_T_90, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_91 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[24] (address = 96) = 0x%x (%d)\n", data_24, data_24) : printf_26 @[DataMem.scala 199:13]
      infer mport data_MPORT_25 = memory[UInt<5>("h19")], clock @[DataMem.scala 198:24]
      node data_25 = asSInt(data_MPORT_25) @[DataMem.scala 198:30]
      node _T_92 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_93 = eq(_T_92, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_93 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[25] (address = 100) = 0x%x (%d)\n", data_25, data_25) : printf_27 @[DataMem.scala 199:13]
      infer mport data_MPORT_26 = memory[UInt<5>("h1a")], clock @[DataMem.scala 198:24]
      node data_26 = asSInt(data_MPORT_26) @[DataMem.scala 198:30]
      node _T_94 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_95 = eq(_T_94, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_95 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[26] (address = 104) = 0x%x (%d)\n", data_26, data_26) : printf_28 @[DataMem.scala 199:13]
      infer mport data_MPORT_27 = memory[UInt<5>("h1b")], clock @[DataMem.scala 198:24]
      node data_27 = asSInt(data_MPORT_27) @[DataMem.scala 198:30]
      node _T_96 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_97 = eq(_T_96, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_97 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[27] (address = 108) = 0x%x (%d)\n", data_27, data_27) : printf_29 @[DataMem.scala 199:13]
      infer mport data_MPORT_28 = memory[UInt<5>("h1c")], clock @[DataMem.scala 198:24]
      node data_28 = asSInt(data_MPORT_28) @[DataMem.scala 198:30]
      node _T_98 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_99 = eq(_T_98, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_99 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[28] (address = 112) = 0x%x (%d)\n", data_28, data_28) : printf_30 @[DataMem.scala 199:13]
      infer mport data_MPORT_29 = memory[UInt<5>("h1d")], clock @[DataMem.scala 198:24]
      node data_29 = asSInt(data_MPORT_29) @[DataMem.scala 198:30]
      node _T_100 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_101 = eq(_T_100, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_101 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[29] (address = 116) = 0x%x (%d)\n", data_29, data_29) : printf_31 @[DataMem.scala 199:13]
      infer mport data_MPORT_30 = memory[UInt<5>("h1e")], clock @[DataMem.scala 198:24]
      node data_30 = asSInt(data_MPORT_30) @[DataMem.scala 198:30]
      node _T_102 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_103 = eq(_T_102, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_103 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[30] (address = 120) = 0x%x (%d)\n", data_30, data_30) : printf_32 @[DataMem.scala 199:13]
      infer mport data_MPORT_31 = memory[UInt<5>("h1f")], clock @[DataMem.scala 198:24]
      node data_31 = asSInt(data_MPORT_31) @[DataMem.scala 198:30]
      node _T_104 = asUInt(reset) @[DataMem.scala 199:13]
      node _T_105 = eq(_T_104, UInt<1>("h0")) @[DataMem.scala 199:13]
      when _T_105 : @[DataMem.scala 199:13]
        printf(clock, UInt<1>("h1"), "\t\tDataMem[31] (address = 124) = 0x%x (%d)\n", data_31, data_31) : printf_33 @[DataMem.scala 199:13]
      node _T_106 = asUInt(reset) @[DataMem.scala 203:11]
      node _T_107 = eq(_T_106, UInt<1>("h0")) @[DataMem.scala 203:11]
      when _T_107 : @[DataMem.scala 203:11]
        printf(clock, UInt<1>("h1"), "\n") : printf_34 @[DataMem.scala 203:11]

  module AXIReadBus :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, slave : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[1]}

    node _read_port_T = geq(io.master.readAddr.bits.addr, UInt<1>("h0")) @[AXIReadBus.scala 26:35]
    node _read_port_T_1 = lt(io.master.readAddr.bits.addr, UInt<11>("h400")) @[AXIReadBus.scala 26:85]
    node _read_port_T_2 = and(_read_port_T, _read_port_T_1) @[AXIReadBus.scala 26:53]
    node read_port = mux(_read_port_T_2, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 101:16]
    reg read_port_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 28:30]
    reg read_addr_reg : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[AXIReadBus.scala 29:30]
    reg read_addr_reg_id : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIReadBus.scala 30:33]
    reg read_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIReadBus.scala 31:35]
    reg read_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 32:36]
    reg outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 33:28]
    io.slave[0].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 38:32]
    io.slave[0].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 39:36]
    io.slave[0].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 40:34]
    io.slave[0].readAddr.bits.region is invalid @[AXIReadBus.scala 41:38]
    io.slave[0].readAddr.bits.len is invalid @[AXIReadBus.scala 42:35]
    io.slave[0].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 43:36]
    io.slave[0].readAddr.bits.burst is invalid @[AXIReadBus.scala 44:37]
    io.slave[0].readAddr.bits.lock is invalid @[AXIReadBus.scala 45:36]
    io.slave[0].readAddr.bits.cache is invalid @[AXIReadBus.scala 46:37]
    io.slave[0].readAddr.bits.prot is invalid @[AXIReadBus.scala 47:36]
    io.slave[0].readAddr.bits.qos is invalid @[AXIReadBus.scala 48:35]
    io.slave[0].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 49:32]
    io.master.readData.valid <= UInt<1>("h0") @[AXIReadBus.scala 52:28]
    io.master.readData.bits.data <= UInt<1>("h0") @[AXIReadBus.scala 53:32]
    io.master.readData.bits.resp <= UInt<1>("h0") @[AXIReadBus.scala 54:32]
    io.master.readData.bits.id is invalid @[AXIReadBus.scala 55:30]
    io.master.readData.bits.last <= UInt<1>("h0") @[AXIReadBus.scala 56:32]
    node _io_master_readAddr_ready_T = not(outstanding) @[AXIReadBus.scala 57:31]
    io.master.readAddr.ready <= _io_master_readAddr_ready_T @[AXIReadBus.scala 57:28]
    node _T = and(io.master.readAddr.ready, io.master.readAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIReadBus.scala 60:33]
      outstanding <= UInt<1>("h1") @[AXIReadBus.scala 61:17]
      read_port_reg <= read_port @[AXIReadBus.scala 62:19]
      read_addr_reg <= io.master.readAddr.bits.addr @[AXIReadBus.scala 63:19]
      read_addr_reg_id <= io.master.readAddr.bits.id @[AXIReadBus.scala 64:22]
      read_addr_reg_size <= io.master.readAddr.bits.size @[AXIReadBus.scala 65:24]
      read_addr_reg_valid <= UInt<1>("h1") @[AXIReadBus.scala 66:25]
    when read_addr_reg_valid : @[AXIReadBus.scala 70:29]
      when io.slave[UInt<1>("h0")].readAddr.ready : @[AXIReadBus.scala 71:50]
        read_addr_reg_valid <= UInt<1>("h0") @[AXIReadBus.scala 72:27]
    when outstanding : @[AXIReadBus.scala 77:21]
      io.master.readData.valid <= io.slave[UInt<1>("h0")].readData.valid @[AXIReadBus.scala 78:30]
      io.master.readData.bits.data <= io.slave[UInt<1>("h0")].readData.bits.data @[AXIReadBus.scala 79:34]
      io.master.readData.bits.resp <= io.slave[UInt<1>("h0")].readData.bits.resp @[AXIReadBus.scala 80:34]
      io.master.readData.bits.last <= io.slave[UInt<1>("h0")].readData.bits.last @[AXIReadBus.scala 81:34]
      io.master.readData.bits.id <= io.slave[UInt<1>("h0")].readData.bits.id @[AXIReadBus.scala 82:32]
      io.slave[UInt<1>("h0")].readAddr.bits.addr <= read_addr_reg @[AXIReadBus.scala 83:48]
      io.slave[UInt<1>("h0")].readAddr.valid <= read_addr_reg_valid @[AXIReadBus.scala 84:44]
      io.slave[UInt<1>("h0")].readData.ready <= io.master.readData.ready @[AXIReadBus.scala 85:44]
      io.slave[UInt<1>("h0")].readAddr.bits.size <= read_addr_reg_size @[AXIReadBus.scala 86:48]
      io.slave[UInt<1>("h0")].readAddr.bits.id <= read_addr_reg_id @[AXIReadBus.scala 87:46]
      node _T_1 = and(io.master.readData.ready, io.master.readData.valid) @[Decoupled.scala 52:35]
      when _T_1 : @[AXIReadBus.scala 88:35]
        outstanding <= UInt<1>("h0") @[AXIReadBus.scala 89:19]

  module RRArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[1], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<0>}

    wire choice : UInt
    choice <= UInt<1>("h0")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[UInt<1>("h0")].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[UInt<1>("h0")].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<0>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_1) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]

  module AXISlaveReadMux :
    input clock : Clock
    input reset : Reset
    output io : { out : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, in : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[1]}

    wire _mask_WIRE : UInt<1>[1] @[AXISlaveReadMux.scala 24:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 24:33]
    wire mask : UInt<1>[1]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveReadMux.scala 30:22]
    wire outstanding : UInt<1>
    outstanding <= io.in[0].readAddr.valid
    inst arbiter of RRArbiter @[AXISlaveReadMux.scala 35:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 36:27]
    reg ar_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 37:30]
    wire _address_reg_WIRE : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveReadMux.scala 38:28]
    wire _data_reg_WIRE : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.resp <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    _data_reg_WIRE.id <= UInt<1>("h0")
    reg data_reg : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveReadMux.scala 43:25]
    io.out.readAddr.bits.qos is invalid @[AXISlaveReadMux.scala 51:28]
    io.out.readAddr.bits.len is invalid @[AXISlaveReadMux.scala 52:28]
    io.out.readAddr.bits.cache is invalid @[AXISlaveReadMux.scala 53:30]
    io.out.readAddr.bits.lock is invalid @[AXISlaveReadMux.scala 54:29]
    io.out.readAddr.bits.size <= UInt<1>("h0") @[AXISlaveReadMux.scala 55:29]
    io.out.readAddr.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 56:27]
    io.out.readAddr.bits.prot is invalid @[AXISlaveReadMux.scala 57:29]
    io.out.readAddr.bits.region is invalid @[AXISlaveReadMux.scala 58:31]
    io.out.readAddr.bits.burst is invalid @[AXISlaveReadMux.scala 59:30]
    io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:25]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 61:24]
    io.in[0].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 64:33]
    io.in[0].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 65:29]
    io.in[0].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 66:33]
    io.in[0].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 67:31]
    io.in[0].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 68:33]
    node _io_in_0_readAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveReadMux.scala 72:55]
    io.in[0].readAddr.ready <= _io_in_0_readAddr_ready_T @[AXISlaveReadMux.scala 72:29]
    node _arbiter_io_in_0_valid_T = and(io.in[0].readAddr.valid, mask[0]) @[AXISlaveReadMux.scala 73:55]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveReadMux.scala 73:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 74:27]
    io.out.readAddr.valid <= ar_determined @[AXISlaveReadMux.scala 77:25]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveReadMux.scala 79:16]
    when _T : @[AXISlaveReadMux.scala 79:16]
      when outstanding : @[AXISlaveReadMux.scala 81:24]
        state <= UInt<2>("h1") @[AXISlaveReadMux.scala 82:15]
    else :
      node _T_1 = eq(UInt<2>("h1"), state) @[AXISlaveReadMux.scala 79:16]
      when _T_1 : @[AXISlaveReadMux.scala 79:16]
        node _T_2 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_2 : @[AXISlaveReadMux.scala 86:33]
          state <= UInt<2>("h2") @[AXISlaveReadMux.scala 87:15]
      else :
        node _T_3 = eq(UInt<2>("h2"), state) @[AXISlaveReadMux.scala 79:16]
        when _T_3 : @[AXISlaveReadMux.scala 79:16]
          node _T_4 = and(io.in[UInt<1>("h0")].readData.ready, io.in[UInt<1>("h0")].readData.valid) @[Decoupled.scala 52:35]
          when _T_4 : @[AXISlaveReadMux.scala 91:44]
            state <= UInt<2>("h0") @[AXISlaveReadMux.scala 92:15]
    node _T_5 = eq(state, UInt<2>("h0")) @[AXISlaveReadMux.scala 97:14]
    when _T_5 : @[AXISlaveReadMux.scala 97:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 98:20]
      when arbiter.io.out.valid : @[AXISlaveReadMux.scala 99:31]
        chosen_reg <= arbiter.io.chosen @[AXISlaveReadMux.scala 100:18]
        address_reg <= io.in[UInt<1>("h0")].readAddr.bits @[AXISlaveReadMux.scala 101:19]
        ar_determined <= UInt<1>("h1") @[AXISlaveReadMux.scala 102:21]
      io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 104:27]
    else :
      node _T_6 = eq(state, UInt<2>("h1")) @[AXISlaveReadMux.scala 106:19]
      when _T_6 : @[AXISlaveReadMux.scala 106:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 107:22]
        node _T_7 = and(io.out.readAddr.ready, io.out.readAddr.valid) @[Decoupled.scala 52:35]
        when _T_7 : @[AXISlaveReadMux.scala 108:33]
          ar_determined <= UInt<1>("h0") @[AXISlaveReadMux.scala 109:23]
        node _T_8 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_8 : @[AXISlaveReadMux.scala 111:33]
          data_reg <= io.out.readData.bits @[AXISlaveReadMux.scala 112:18]
        io.out.readData.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 114:29]
      else :
        node _T_9 = eq(state, UInt<2>("h2")) @[AXISlaveReadMux.scala 116:19]
        when _T_9 : @[AXISlaveReadMux.scala 116:31]
          mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 117:20]
          io.in[UInt<1>("h0")].readData.valid <= UInt<1>("h1") @[AXISlaveReadMux.scala 118:38]
    io.out.readAddr.bits <= address_reg @[AXISlaveReadMux.scala 121:24]
    io.in[UInt<1>("h0")].readData.bits <= data_reg @[AXISlaveReadMux.scala 122:35]

  module AXIWriteBus :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}, slave : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}[1]}

    node _write_port_T = geq(io.master.writeAddr.bits.addr, UInt<1>("h0")) @[AXIWriteBus.scala 28:36]
    node _write_port_T_1 = lt(io.master.writeAddr.bits.addr, UInt<11>("h400")) @[AXIWriteBus.scala 28:87]
    node _write_port_T_2 = and(_write_port_T, _write_port_T_1) @[AXIWriteBus.scala 28:54]
    node write_port = mux(_write_port_T_2, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 101:16]
    reg write_port_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 31:31]
    reg write_addr_reg : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[AXIWriteBus.scala 33:31]
    reg write_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 34:37]
    reg write_addr_reg_id : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 35:34]
    reg write_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIWriteBus.scala 36:36]
    reg write_data_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIWriteBus.scala 38:31]
    reg write_data_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 39:37]
    reg write_data_reg_strb : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 40:36]
    reg write_data_reg_last : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 41:36]
    reg write_resp_reg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 43:31]
    reg write_resp_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 44:37]
    reg write_resp_reg_id : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 45:34]
    reg w_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 48:30]
    reg aw_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 49:31]
    reg b_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 50:30]
    io.slave[0].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 54:33]
    io.slave[0].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 55:37]
    io.slave[0].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[0].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 57:37]
    io.slave[0].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 58:33]
    io.slave[0].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 59:37]
    io.slave[0].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 60:35]
    io.slave[0].writeAddr.bits.region is invalid @[AXIWriteBus.scala 61:39]
    io.slave[0].writeAddr.bits.len is invalid @[AXIWriteBus.scala 62:36]
    io.slave[0].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 63:37]
    io.slave[0].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 64:38]
    io.slave[0].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 65:37]
    io.slave[0].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 66:38]
    io.slave[0].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 67:37]
    io.slave[0].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 68:36]
    io.slave[0].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 69:33]
    node _io_master_writeData_ready_T = not(w_outstanding) @[AXIWriteBus.scala 72:32]
    io.master.writeData.ready <= _io_master_writeData_ready_T @[AXIWriteBus.scala 72:29]
    node _io_master_writeAddr_ready_T = not(aw_outstanding) @[AXIWriteBus.scala 73:32]
    io.master.writeAddr.ready <= _io_master_writeAddr_ready_T @[AXIWriteBus.scala 73:29]
    io.master.writeResp.valid <= write_resp_reg_valid @[AXIWriteBus.scala 74:29]
    io.master.writeResp.bits.resp <= write_resp_reg @[AXIWriteBus.scala 75:33]
    io.master.writeResp.bits.id <= write_resp_reg_id @[AXIWriteBus.scala 76:31]
    node _T = and(io.master.writeAddr.ready, io.master.writeAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIWriteBus.scala 80:34]
      aw_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 81:20]
      write_port_reg <= write_port @[AXIWriteBus.scala 82:20]
      write_addr_reg <= io.master.writeAddr.bits.addr @[AXIWriteBus.scala 83:20]
      write_addr_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 84:26]
      write_addr_reg_id <= io.master.writeAddr.bits.id @[AXIWriteBus.scala 85:23]
      write_addr_reg_size <= io.master.writeAddr.bits.size @[AXIWriteBus.scala 86:25]
    node _T_1 = and(io.master.writeData.ready, io.master.writeData.valid) @[Decoupled.scala 52:35]
    when _T_1 : @[AXIWriteBus.scala 88:34]
      w_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 89:19]
      write_data_reg_strb <= io.master.writeData.bits.strb @[AXIWriteBus.scala 90:25]
      write_data_reg <= io.master.writeData.bits.data @[AXIWriteBus.scala 91:20]
      write_data_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 92:26]
      write_data_reg_last <= io.master.writeData.bits.last @[AXIWriteBus.scala 93:25]
    node _T_2 = and(write_addr_reg_valid, io.slave[UInt<1>("h0")].writeAddr.ready) @[AXIWriteBus.scala 97:29]
    when _T_2 : @[AXIWriteBus.scala 97:74]
      write_addr_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 98:28]
    node _T_3 = and(write_data_reg_valid, io.slave[UInt<1>("h0")].writeData.ready) @[AXIWriteBus.scala 100:29]
    when _T_3 : @[AXIWriteBus.scala 100:74]
      write_data_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 101:28]
    node _T_4 = and(aw_outstanding, w_outstanding) @[AXIWriteBus.scala 105:23]
    node _T_5 = and(_T_4, write_resp_reg_valid) @[AXIWriteBus.scala 105:40]
    node _T_6 = and(_T_5, io.master.writeResp.ready) @[AXIWriteBus.scala 105:64]
    when _T_6 : @[AXIWriteBus.scala 105:94]
      write_resp_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 106:28]
      aw_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 107:22]
      w_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 108:21]
      b_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 109:21]
    when aw_outstanding : @[AXIWriteBus.scala 112:24]
      node _T_7 = and(io.slave[UInt<1>("h0")].writeResp.ready, io.slave[UInt<1>("h0")].writeResp.valid) @[Decoupled.scala 52:35]
      when _T_7 : @[AXIWriteBus.scala 114:50]
        b_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 115:21]
        write_resp_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 116:28]
        write_resp_reg <= io.slave[UInt<1>("h0")].writeResp.bits.resp @[AXIWriteBus.scala 117:22]
        write_resp_reg_id <= io.slave[UInt<1>("h0")].writeResp.bits.id @[AXIWriteBus.scala 118:25]
      io.slave[UInt<1>("h0")].writeAddr.bits.addr <= write_addr_reg @[AXIWriteBus.scala 121:50]
      io.slave[UInt<1>("h0")].writeAddr.valid <= write_addr_reg_valid @[AXIWriteBus.scala 122:46]
      io.slave[UInt<1>("h0")].writeAddr.bits.id <= write_addr_reg_id @[AXIWriteBus.scala 123:48]
      io.slave[UInt<1>("h0")].writeAddr.bits.size <= write_addr_reg_size @[AXIWriteBus.scala 124:50]
      io.slave[UInt<1>("h0")].writeData.bits.data <= write_data_reg @[AXIWriteBus.scala 125:50]
      io.slave[UInt<1>("h0")].writeData.bits.strb <= write_data_reg_strb @[AXIWriteBus.scala 126:50]
      io.slave[UInt<1>("h0")].writeData.valid <= write_data_reg_valid @[AXIWriteBus.scala 127:46]
      io.slave[UInt<1>("h0")].writeData.bits.last <= write_data_reg_last @[AXIWriteBus.scala 128:50]
      node _io_slave_0_writeResp_ready_T = not(b_outstanding) @[AXIWriteBus.scala 129:49]
      io.slave[UInt<1>("h0")].writeResp.ready <= _io_slave_0_writeResp_ready_T @[AXIWriteBus.scala 129:46]

  module RRArbiter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[1], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<0>}

    wire choice : UInt
    choice <= UInt<1>("h0")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[UInt<1>("h0")].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[UInt<1>("h0")].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<0>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_1) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]

  module AXISlaveWriteMux :
    input clock : Clock
    input reset : Reset
    output io : { out : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}, in : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}}[1]}

    wire _mask_WIRE : UInt<1>[1] @[AXISlaveWriteMux.scala 26:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 26:33]
    wire mask : UInt<1>[1]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveWriteMux.scala 32:22]
    wire outstanding : UInt<1>
    outstanding <= io.in[0].writeAddr.valid
    inst arbiter of RRArbiter_1 @[AXISlaveWriteMux.scala 38:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 39:27]
    reg w_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 40:29]
    reg aw_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 41:30]
    wire _address_reg_WIRE : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveWriteMux.scala 43:28]
    wire _data_reg_WIRE : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.strb <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    reg data_reg : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveWriteMux.scala 48:25]
    wire _resp_reg_WIRE : { id : UInt<4>, resp : UInt<2>}
    _resp_reg_WIRE.resp <= UInt<1>("h0")
    _resp_reg_WIRE.id <= UInt<1>("h0")
    reg resp_reg : { id : UInt<4>, resp : UInt<2>}, clock with :
      reset => (reset, _resp_reg_WIRE) @[AXISlaveWriteMux.scala 53:25]
    io.out.writeAddr.bits.qos is invalid @[AXISlaveWriteMux.scala 59:29]
    io.out.writeAddr.bits.len is invalid @[AXISlaveWriteMux.scala 60:29]
    io.out.writeAddr.bits.cache is invalid @[AXISlaveWriteMux.scala 61:31]
    io.out.writeAddr.bits.lock is invalid @[AXISlaveWriteMux.scala 62:30]
    io.out.writeAddr.bits.size <= UInt<1>("h0") @[AXISlaveWriteMux.scala 63:30]
    io.out.writeAddr.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 64:28]
    io.out.writeAddr.bits.prot is invalid @[AXISlaveWriteMux.scala 65:30]
    io.out.writeAddr.bits.region is invalid @[AXISlaveWriteMux.scala 66:32]
    io.out.writeAddr.bits.burst is invalid @[AXISlaveWriteMux.scala 67:31]
    io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:26]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 69:24]
    io.in[0].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 72:30]
    io.in[0].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 73:30]
    io.in[0].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 74:32]
    io.in[0].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 75:34]
    node _io_in_0_writeAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveWriteMux.scala 79:56]
    io.in[0].writeAddr.ready <= _io_in_0_writeAddr_ready_T @[AXISlaveWriteMux.scala 79:30]
    node _arbiter_io_in_0_valid_T = and(io.in[0].writeAddr.valid, mask[0]) @[AXISlaveWriteMux.scala 80:56]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveWriteMux.scala 80:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 81:27]
    io.out.writeAddr.valid <= aw_determined @[AXISlaveWriteMux.scala 85:26]
    io.out.writeData.valid <= w_determined @[AXISlaveWriteMux.scala 86:26]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveWriteMux.scala 88:16]
    when _T : @[AXISlaveWriteMux.scala 88:16]
      when outstanding : @[AXISlaveWriteMux.scala 90:24]
        node _T_1 = and(io.in[UInt<1>("h0")].writeData.ready, io.in[UInt<1>("h0")].writeData.valid) @[Decoupled.scala 52:35]
        when _T_1 : @[AXISlaveWriteMux.scala 92:61]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 93:17]
        else :
          state <= UInt<2>("h1") @[AXISlaveWriteMux.scala 96:17]
    else :
      node _T_2 = eq(UInt<2>("h1"), state) @[AXISlaveWriteMux.scala 88:16]
      when _T_2 : @[AXISlaveWriteMux.scala 88:16]
        node _T_3 = and(io.in[UInt<1>("h0")].writeData.ready, io.in[UInt<1>("h0")].writeData.valid) @[Decoupled.scala 52:35]
        when _T_3 : @[AXISlaveWriteMux.scala 101:45]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 102:15]
      else :
        node _T_4 = eq(UInt<2>("h2"), state) @[AXISlaveWriteMux.scala 88:16]
        when _T_4 : @[AXISlaveWriteMux.scala 88:16]
          node _T_5 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_5 : @[AXISlaveWriteMux.scala 106:34]
            state <= UInt<2>("h3") @[AXISlaveWriteMux.scala 107:15]
        else :
          node _T_6 = eq(UInt<2>("h3"), state) @[AXISlaveWriteMux.scala 88:16]
          when _T_6 : @[AXISlaveWriteMux.scala 88:16]
            node _T_7 = and(io.in[UInt<1>("h0")].writeResp.ready, io.in[UInt<1>("h0")].writeResp.valid) @[Decoupled.scala 52:35]
            when _T_7 : @[AXISlaveWriteMux.scala 111:45]
              state <= UInt<2>("h0") @[AXISlaveWriteMux.scala 112:15]
    node _T_8 = eq(state, UInt<2>("h0")) @[AXISlaveWriteMux.scala 117:14]
    when _T_8 : @[AXISlaveWriteMux.scala 117:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 119:20]
      when arbiter.io.out.valid : @[AXISlaveWriteMux.scala 121:31]
        io.in[UInt<1>("h0")].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 122:48]
        chosen_reg <= arbiter.io.chosen @[AXISlaveWriteMux.scala 123:18]
        address_reg <= io.in[UInt<1>("h0")].writeAddr.bits @[AXISlaveWriteMux.scala 124:19]
        aw_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 125:21]
        node _T_9 = and(io.in[UInt<1>("h0")].writeData.ready, io.in[UInt<1>("h0")].writeData.valid) @[Decoupled.scala 52:35]
        when _T_9 : @[AXISlaveWriteMux.scala 126:59]
          data_reg <= io.in[UInt<1>("h0")].writeData.bits @[AXISlaveWriteMux.scala 127:18]
          w_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 128:22]
      io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 131:28]
    else :
      node _T_10 = eq(state, UInt<2>("h1")) @[AXISlaveWriteMux.scala 133:19]
      when _T_10 : @[AXISlaveWriteMux.scala 133:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 134:20]
        node _T_11 = and(io.in[UInt<1>("h0")].writeData.ready, io.in[UInt<1>("h0")].writeData.valid) @[Decoupled.scala 52:35]
        when _T_11 : @[AXISlaveWriteMux.scala 135:43]
          data_reg <= io.in[UInt<1>("h0")].writeData.bits @[AXISlaveWriteMux.scala 136:16]
        node _T_12 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
        when _T_12 : @[AXISlaveWriteMux.scala 138:32]
          aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 139:21]
        io.in[UInt<1>("h0")].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 141:39]
        io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 142:28]
      else :
        node _T_13 = eq(state, UInt<2>("h2")) @[AXISlaveWriteMux.scala 144:19]
        when _T_13 : @[AXISlaveWriteMux.scala 144:33]
          mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 145:22]
          node _T_14 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
          when _T_14 : @[AXISlaveWriteMux.scala 146:34]
            aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 147:23]
          node _T_15 = and(io.out.writeData.ready, io.out.writeData.valid) @[Decoupled.scala 52:35]
          when _T_15 : @[AXISlaveWriteMux.scala 149:34]
            w_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 150:22]
          node _T_16 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_16 : @[AXISlaveWriteMux.scala 152:34]
            resp_reg <= io.out.writeResp.bits @[AXISlaveWriteMux.scala 153:18]
          io.out.writeResp.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 155:30]
        else :
          node _T_17 = eq(state, UInt<2>("h3")) @[AXISlaveWriteMux.scala 157:19]
          when _T_17 : @[AXISlaveWriteMux.scala 157:31]
            mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 158:20]
            io.in[UInt<1>("h0")].writeResp.valid <= UInt<1>("h1") @[AXISlaveWriteMux.scala 159:39]
    io.out.writeData.bits <= data_reg @[AXISlaveWriteMux.scala 162:25]
    io.out.writeAddr.bits <= address_reg @[AXISlaveWriteMux.scala 163:25]
    io.in[UInt<1>("h0")].writeResp.bits <= resp_reg @[AXISlaveWriteMux.scala 164:36]

  module AXILiteXBar :
    input clock : Clock
    input reset : Reset
    output io : { flip masters : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[1], flip slaves : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, addr : UInt<15>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<4>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[1]}

    inst readBuses_0 of AXIReadBus @[AXILiteXBar.scala 15:11]
    readBuses_0.clock <= clock
    readBuses_0.reset <= reset
    inst readMuxes_0 of AXISlaveReadMux @[AXILiteXBar.scala 18:11]
    readMuxes_0.clock <= clock
    readMuxes_0.reset <= reset
    inst writeBuses_0 of AXIWriteBus @[AXILiteXBar.scala 23:11]
    writeBuses_0.clock <= clock
    writeBuses_0.reset <= reset
    inst writeMuxes_0 of AXISlaveWriteMux @[AXILiteXBar.scala 27:11]
    writeMuxes_0.clock <= clock
    writeMuxes_0.reset <= reset
    readBuses_0.io.master.readAddr <= io.masters[0].ar @[AXILiteXBar.scala 32:15]
    io.masters[0].r.bits <= readBuses_0.io.master.readData.bits @[AXILiteXBar.scala 33:14]
    io.masters[0].r.valid <= readBuses_0.io.master.readData.valid @[AXILiteXBar.scala 33:14]
    readBuses_0.io.master.readData.ready <= io.masters[0].r.ready @[AXILiteXBar.scala 33:14]
    writeBuses_0.io.master.writeAddr <= io.masters[0].aw @[AXILiteXBar.scala 37:15]
    writeBuses_0.io.master.writeData <= io.masters[0].w @[AXILiteXBar.scala 38:14]
    io.masters[0].b.bits <= writeBuses_0.io.master.writeResp.bits @[AXILiteXBar.scala 39:14]
    io.masters[0].b.valid <= writeBuses_0.io.master.writeResp.valid @[AXILiteXBar.scala 39:14]
    writeBuses_0.io.master.writeResp.ready <= io.masters[0].b.ready @[AXILiteXBar.scala 39:14]
    io.slaves[0].ar.bits <= readMuxes_0.io.out.readAddr.bits @[AXILiteXBar.scala 45:16]
    io.slaves[0].ar.valid <= readMuxes_0.io.out.readAddr.valid @[AXILiteXBar.scala 45:16]
    readMuxes_0.io.out.readAddr.ready <= io.slaves[0].ar.ready @[AXILiteXBar.scala 45:16]
    readMuxes_0.io.out.readData <= io.slaves[0].r @[AXILiteXBar.scala 46:15]
    io.slaves[0].aw.bits <= writeMuxes_0.io.out.writeAddr.bits @[AXILiteXBar.scala 51:16]
    io.slaves[0].aw.valid <= writeMuxes_0.io.out.writeAddr.valid @[AXILiteXBar.scala 51:16]
    writeMuxes_0.io.out.writeAddr.ready <= io.slaves[0].aw.ready @[AXILiteXBar.scala 51:16]
    io.slaves[0].w.bits <= writeMuxes_0.io.out.writeData.bits @[AXILiteXBar.scala 52:15]
    io.slaves[0].w.valid <= writeMuxes_0.io.out.writeData.valid @[AXILiteXBar.scala 52:15]
    writeMuxes_0.io.out.writeData.ready <= io.slaves[0].w.ready @[AXILiteXBar.scala 52:15]
    writeMuxes_0.io.out.writeResp <= io.slaves[0].b @[AXILiteXBar.scala 53:15]
    readBuses_0.io.slave[0].readData <= readMuxes_0.io.in[0].readData @[AXILiteXBar.scala 58:30]
    readMuxes_0.io.in[0].readAddr <= readBuses_0.io.slave[0].readAddr @[AXILiteXBar.scala 58:30]
    writeBuses_0.io.slave[0].writeResp <= writeMuxes_0.io.in[0].writeResp @[AXILiteXBar.scala 62:31]
    writeMuxes_0.io.in[0].writeData <= writeBuses_0.io.slave[0].writeData @[AXILiteXBar.scala 62:31]
    writeMuxes_0.io.in[0].writeAddr <= writeBuses_0.io.slave[0].writeAddr @[AXILiteXBar.scala 62:31]

  module top_SoC :
    input clock : Clock
    input reset : UInt<1>
    output io : { regs : UInt<32>[32], Hcf : UInt<1>, inst : UInt<32>, rdata : UInt<32>, wdata : UInt<32>, flip Dump_Mem : UInt<1>, E_Branch_taken : UInt<1>, Flush : UInt<1>, Stall_MA : UInt<1>, Stall_DH : UInt<1>, IF_PC : UInt<32>, ID_PC : UInt<32>, EXE_PC : UInt<32>, MEM_PC : UInt<32>, WB_PC : UInt<32>, EXE_alu_out : UInt<32>, EXE_src1 : UInt<32>, EXE_src2 : UInt<32>, ALU_src1 : UInt<32>, ALU_src2 : UInt<32>, raddr : UInt<32>, WB_rd : UInt<5>, WB_wdata : UInt<32>, EXE_Jump : UInt<1>, EXE_Branch : UInt<1>}

    inst cpu of PiplinedCPU @[top_SoC.scala 64:19]
    cpu.clock <= clock
    cpu.reset <= reset
    inst im of InstMem @[top_SoC.scala 65:18]
    im.clock <= clock
    im.reset <= reset
    inst datamem of DataMem @[top_SoC.scala 66:23]
    datamem.clock <= clock
    datamem.reset <= reset
    inst bus of AXILiteXBar @[top_SoC.scala 78:19]
    bus.clock <= clock
    bus.reset <= reset
    datamem.io.dump <= io.Dump_Mem @[top_SoC.scala 92:19]
    cpu.io.InstMem.rdata <= im.io.inst @[top_SoC.scala 95:24]
    cpu.io.InstMem.Valid <= UInt<1>("h1") @[top_SoC.scala 96:24]
    im.io.raddr <= cpu.io.InstMem.raddr @[top_SoC.scala 99:15]
    bus.io.masters[0] <= cpu.io.DataMem @[top_SoC.scala 102:21]
    bus.io.slaves[0] <= datamem.io.slave @[top_SoC.scala 103:20]
    io.regs <= cpu.io.regs @[top_SoC.scala 106:11]
    io.Hcf <= cpu.io.Hcf @[top_SoC.scala 107:10]
    io.inst <= im.io.inst @[top_SoC.scala 109:11]
    io.rdata <= datamem.io.slave.r.bits.data @[top_SoC.scala 110:12]
    io.wdata <= datamem.io.slave.w.bits.data @[top_SoC.scala 111:12]
    io.E_Branch_taken <= cpu.io.E_Branch_taken @[top_SoC.scala 114:21]
    io.Flush <= cpu.io.Flush @[top_SoC.scala 115:12]
    io.Stall_MA <= cpu.io.Stall_MA @[top_SoC.scala 116:15]
    io.Stall_DH <= cpu.io.Stall_DH @[top_SoC.scala 117:15]
    io.IF_PC <= cpu.io.IF_PC @[top_SoC.scala 118:12]
    io.ID_PC <= cpu.io.ID_PC @[top_SoC.scala 119:12]
    io.EXE_PC <= cpu.io.EXE_PC @[top_SoC.scala 120:13]
    io.MEM_PC <= cpu.io.MEM_PC @[top_SoC.scala 121:13]
    io.WB_PC <= cpu.io.WB_PC @[top_SoC.scala 122:12]
    io.EXE_alu_out <= cpu.io.EXE_alu_out @[top_SoC.scala 123:18]
    io.EXE_src1 <= cpu.io.EXE_src1 @[top_SoC.scala 124:15]
    io.EXE_src2 <= cpu.io.EXE_src2 @[top_SoC.scala 125:15]
    io.ALU_src1 <= cpu.io.ALU_src1 @[top_SoC.scala 126:15]
    io.ALU_src2 <= cpu.io.ALU_src2 @[top_SoC.scala 127:15]
    io.raddr <= cpu.io.raddr @[top_SoC.scala 128:12]
    io.WB_rd <= cpu.io.WB_rd @[top_SoC.scala 129:12]
    io.WB_wdata <= cpu.io.WB_wdata @[top_SoC.scala 130:15]
    io.EXE_Jump <= cpu.io.EXE_Jump @[top_SoC.scala 131:15]
    io.EXE_Branch <= cpu.io.EXE_Branch @[top_SoC.scala 132:17]

